# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, the Sphinx developers
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-03 20:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../usage/referencing.rst:5
msgid "Cross-referencing syntax"
msgstr ""

#: ../../../usage/referencing.rst:7
msgid ""
"Cross-references are generated by many semantic interpreted text roles. "
"Basically, you only need to write ``:role:`target```, and a link will be "
"created to the item named *target* of the type indicated by *role*.  The "
"link's text will be the same as *target*."
msgstr ""

#: ../../../usage/referencing.rst:12
msgid ""
"There are some additional facilities, however, that make cross-referencing "
"roles more versatile:"
msgstr ""

#: ../../../usage/referencing.rst:15
msgid ""
"You may supply an explicit title and reference target, like in "
"reStructuredText direct hyperlinks: ``:role:`title <target>``` will refer to "
"*target*, but the link text will be *title*."
msgstr ""

#: ../../../usage/referencing.rst:20
msgid ""
"If you prefix the content with ``!``, no reference/hyperlink will be created."
msgstr ""

#: ../../../usage/referencing.rst:22
msgid ""
"If you prefix the content with ``~``, the link text will only be the last "
"component of the target.  For example, ``:py:meth:`~Queue.Queue.get``` will "
"refer to ``Queue.Queue.get`` but only display ``get`` as the link text.  "
"This does not work with all cross-reference roles, but is domain specific."
msgstr ""

#: ../../../usage/referencing.rst:27
msgid ""
"In HTML output, the link's ``title`` attribute (that is e.g. shown as a tool-"
"tip on mouse-hover) will always be the full target name."
msgstr ""

#: ../../../usage/referencing.rst:34
msgid "Cross-referencing anything"
msgstr ""

#: ../../../usage/referencing.rst:40
msgid ""
"This convenience role tries to do its best to find a valid target for its "
"reference text."
msgstr ""

#: ../../../usage/referencing.rst:43
msgid ""
"First, it tries standard cross-reference targets that would be referenced "
"by :rst:role:`doc`, :rst:role:`ref` or :rst:role:`option`."
msgstr ""

#: ../../../usage/referencing.rst:46
msgid ""
"Custom objects added to the standard domain by extensions (see :meth:`."
"Sphinx.add_object_type`) are also searched."
msgstr ""

#: ../../../usage/referencing.rst:49
msgid ""
"Then, it looks for objects (targets) in all loaded domains.  It is up to the "
"domains how specific a match must be.  For example, in the Python domain a "
"reference of ``:any:`Builder``` would match the ``sphinx.builders.Builder`` "
"class."
msgstr ""

#: ../../../usage/referencing.rst:54
msgid ""
"If none or multiple targets are found, a warning will be emitted.  In the "
"case of multiple targets, you can change \"any\" to a specific role."
msgstr ""

#: ../../../usage/referencing.rst:57
msgid ""
"This role is a good candidate for setting :confval:`default_role`.  If you "
"do, you can write cross-references without a lot of markup overhead.  For "
"example, in this Python function documentation::"
msgstr ""

#: ../../../usage/referencing.rst:61
msgid ""
".. function:: install()\n"
"\n"
"   This function installs a `handler` for every signal known by the\n"
"   `signal` module.  See the section `about-signals` for more information."
msgstr ""

#: ../../../usage/referencing.rst:66
msgid ""
"there could be references to a glossary term (usually ``:term:`handler```), "
"a Python module (usually ``:py:mod:`signal``` or ``:mod:`signal```) and a "
"section (usually ``:ref:`about-signals```)."
msgstr ""

#: ../../../usage/referencing.rst:70
msgid ""
"The :rst:role:`any` role also works together with the :mod:`~sphinx.ext."
"intersphinx` extension: when no local cross-reference is found, all object "
"types of intersphinx inventories are also searched."
msgstr ""

#: ../../../usage/referencing.rst:75
msgid "Cross-referencing objects"
msgstr ""

#: ../../../usage/referencing.rst:77
msgid "These roles are described with their respective domains:"
msgstr ""

#: ../../../usage/referencing.rst:79
msgid ":ref:`Python <python-xref-roles>`"
msgstr ""

#: ../../../usage/referencing.rst:80
msgid ":ref:`C <c-xref-roles>`"
msgstr ""

#: ../../../usage/referencing.rst:81
msgid ":ref:`C++ <cpp-xref-roles>`"
msgstr ""

#: ../../../usage/referencing.rst:82
msgid ":ref:`JavaScript <js-xref-roles>`"
msgstr ""

#: ../../../usage/referencing.rst:83
msgid ":ref:`reStructuredText <rst-xref-roles>`"
msgstr ""

#: ../../../usage/referencing.rst:89
msgid "Cross-referencing arbitrary locations"
msgstr ""

#: ../../../usage/referencing.rst:93
msgid ""
"To support cross-referencing to arbitrary locations in any document, the "
"standard reStructuredText labels are used. For this to work label names must "
"be unique throughout the entire documentation. There are two ways in which "
"you can refer to labels:"
msgstr ""

#: ../../../usage/referencing.rst:99
msgid ""
"If you place a label directly before a section title, you can reference to "
"it with ``:ref:`label-name```.  For example::"
msgstr ""

#: ../../../usage/referencing.rst:102
msgid ""
".. _my-reference-label:\n"
"\n"
"Section to cross-reference\n"
"--------------------------\n"
"\n"
"This is the text of the section.\n"
"\n"
"It refers to the section itself, see :ref:`my-reference-label`."
msgstr ""

#: ../../../usage/referencing.rst:111
msgid ""
"The ``:ref:`` role would then generate a link to the section, with the link "
"title being \"Section to cross-reference\".  This works just as well when "
"section and reference are in different source files."
msgstr ""

#: ../../../usage/referencing.rst:115
msgid "Automatic labels also work with figures. For example::"
msgstr ""

#: ../../../usage/referencing.rst:117
msgid ""
".. _my-figure:\n"
"\n"
".. figure:: whatever\n"
"\n"
"   Figure caption"
msgstr ""

#: ../../../usage/referencing.rst:123
msgid ""
"In this case, a  reference ``:ref:`my-figure``` would insert a reference to "
"the figure with link text \"Figure caption\"."
msgstr ""

#: ../../../usage/referencing.rst:126
msgid ""
"The same works for tables that are given an explicit caption using the :"
"dudir:`table` directive."
msgstr ""

#: ../../../usage/referencing.rst:129
msgid ""
"Labels that aren't placed before a section title can still be referenced, "
"but you must give the link an explicit title, using this syntax: ``:ref:"
"`Link title <label-name>```."
msgstr ""

#: ../../../usage/referencing.rst:135
msgid ""
"Reference labels must start with an underscore. When referencing a label, "
"the underscore must be omitted (see examples above)."
msgstr ""

#: ../../../usage/referencing.rst:138
msgid ""
"Using :rst:role:`ref` is advised over standard reStructuredText links to "
"sections (like ```Section title`_``) because it works across files, when "
"section headings are changed, will raise warnings if incorrect, and works "
"for all builders that support cross-references."
msgstr ""

#: ../../../usage/referencing.rst:145
msgid "Cross-referencing documents"
msgstr ""

#: ../../../usage/referencing.rst:149
msgid "There is also a way to directly link to documents:"
msgstr ""

#: ../../../usage/referencing.rst:153
msgid ""
"Link to the specified document; the document name can be specified in "
"absolute or relative fashion.  For example, if the reference ``:doc:"
"`parrot``` occurs in the document ``sketches/index``, then the link refers "
"to ``sketches/parrot``.  If the reference is ``:doc:`/people``` or ``:doc:"
"`../people```, the link refers to ``people``."
msgstr ""

#: ../../../usage/referencing.rst:159
msgid ""
"If no explicit link text is given (like usual: ``:doc:`Monty Python members "
"</people>```), the link caption will be the title of the given document."
msgstr ""

#: ../../../usage/referencing.rst:164
msgid "Referencing downloadable files"
msgstr ""

#: ../../../usage/referencing.rst:170
msgid ""
"This role lets you link to files within your source tree that are not "
"reStructuredText documents that can be viewed, but files that can be "
"downloaded."
msgstr ""

#: ../../../usage/referencing.rst:174
msgid ""
"When you use this role, the referenced file is automatically marked for "
"inclusion in the output when building (obviously, for HTML output only). All "
"downloadable files are put into a ``_downloads/<unique hash>/`` subdirectory "
"of the output directory; duplicate filenames are handled."
msgstr ""

#: ../../../usage/referencing.rst:179
msgid "An example::"
msgstr ""

#: ../../../usage/referencing.rst:181
msgid "See :download:`this example script <../example.py>`."
msgstr ""

#: ../../../usage/referencing.rst:183
msgid ""
"The given filename is usually relative to the directory the current source "
"file is contained in, but if it absolute (starting with ``/``), it is taken "
"as relative to the top source directory."
msgstr ""

#: ../../../usage/referencing.rst:187
msgid ""
"The ``example.py`` file will be copied to the output directory, and a "
"suitable link generated to it."
msgstr ""

#: ../../../usage/referencing.rst:190
msgid ""
"Not to show unavailable download links, you should wrap whole paragraphs "
"that have this role::"
msgstr ""

#: ../../../usage/referencing.rst:193
msgid ""
".. only:: builder_html\n"
"\n"
"   See :download:`this example script <../example.py>`."
msgstr ""

#: ../../../usage/referencing.rst:198
msgid "Cross-referencing figures by figure number"
msgstr ""

#: ../../../usage/referencing.rst:202
msgid ""
":rst:role:`numref` role can also refer sections. And :rst:role:`numref` "
"allows ``{name}`` for the link text."
msgstr ""

#: ../../../usage/referencing.rst:208
msgid ""
"Link to the specified figures, tables, code-blocks and sections; the "
"standard reStructuredText labels are used. When you use this role, it will "
"insert a reference to the figure with link text by its figure number like "
"\"Fig. 1.1\"."
msgstr ""

#: ../../../usage/referencing.rst:213
msgid ""
"If an explicit link text is given (as usual: ``:numref:`Image of Sphinx "
"(Fig. %s) <my-figure>```), the link caption will serve as title of the "
"reference. As placeholders, `%s` and `{number}` get replaced by the figure "
"number and  `{name}` by the figure caption. If no explicit link text is "
"given, the :confval:`numfig_format` setting is used as fall-back default."
msgstr ""

#: ../../../usage/referencing.rst:220
msgid ""
"If :confval:`numfig` is ``False``, figures are not numbered, so this role "
"inserts not a reference but the label or the link text."
msgstr ""

#: ../../../usage/referencing.rst:224
msgid "Cross-referencing other items of interest"
msgstr ""

#: ../../../usage/referencing.rst:226
msgid ""
"The following roles do possibly create a cross-reference, but do not refer "
"to objects:"
msgstr ""

#: ../../../usage/referencing.rst:231
msgid ""
"A configuration value or setting. Index entries are generated. Also "
"generates a link to the matching :rst:dir:`confval` directive, if it exists."
msgstr ""

#: ../../../usage/referencing.rst:238
msgid ""
"An environment variable.  Index entries are generated.  Also generates a "
"link to the matching :rst:dir:`envvar` directive, if it exists."
msgstr ""

#: ../../../usage/referencing.rst:243
msgid ""
"The name of a grammar token (used to create links between :rst:dir:"
"`productionlist` directives)."
msgstr ""

#: ../../../usage/referencing.rst:248
msgid ""
"The name of a keyword in Python.  This creates a link to a reference label "
"with that name, if it exists."
msgstr ""

#: ../../../usage/referencing.rst:253
msgid ""
"A command-line option to an executable program.  This generates a link to a :"
"rst:dir:`option` directive, if it exists."
msgstr ""

#: ../../../usage/referencing.rst:257
msgid ""
"The following role creates a cross-reference to a term in a :ref:`glossary "
"<glossary-directive>`:"
msgstr ""

#: ../../../usage/referencing.rst:262
msgid ""
"Reference to a term in a glossary.  A glossary is created using the "
"``glossary`` directive containing a definition list with terms and "
"definitions.  It does not have to be in the same file as the ``term`` "
"markup, for example the Python docs have one global glossary in the "
"``glossary.rst`` file."
msgstr ""

#: ../../../usage/referencing.rst:268
msgid ""
"If you use a term that's not explained in a glossary, you'll get a warning "
"during build."
msgstr ""
