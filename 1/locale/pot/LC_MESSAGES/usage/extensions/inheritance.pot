# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2019, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-03 20:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../usage/extensions/inheritance.rst:4
msgid ":mod:`sphinx.ext.inheritance_diagram` -- Include inheritance diagrams"
msgstr ""

#: ../../../usage/extensions/inheritance.rst:11
msgid ""
"This extension allows you to include inheritance diagrams, rendered via the :"
"mod:`Graphviz extension <sphinx.ext.graphviz>`."
msgstr ""

#: ../../../usage/extensions/inheritance.rst:14
msgid "It adds this directive:"
msgstr ""

#: ../../../usage/extensions/inheritance.rst:18
msgid ""
"This directive has one or more arguments, each giving a module or class "
"name.  Class names can be unqualified; in that case they are taken to exist "
"in the currently described module (see :rst:dir:`py:module`)."
msgstr ""

#: ../../../usage/extensions/inheritance.rst:22
msgid ""
"For each given class, and each class in each given module, the base classes "
"are determined.  Then, from all classes and their base classes, a graph is "
"generated which is then rendered via the graphviz extension to a directed "
"graph."
msgstr ""

#: ../../../usage/extensions/inheritance.rst:27
msgid ""
"This directive supports an option called ``parts`` that, if given, must be "
"an integer, advising the directive to remove that many parts of module names "
"from the displayed names.  (For example, if all your class names start with "
"``lib.``, you can give ``:parts: 1`` to remove that prefix from the "
"displayed node names.)"
msgstr ""

#: ../../../usage/extensions/inheritance.rst:33
msgid ""
"It also supports a ``private-bases`` flag option; if given, private base "
"classes (those whose name starts with ``_``) will be included."
msgstr ""

#: ../../../usage/extensions/inheritance.rst:36
msgid "You can use ``caption`` option to give a caption to the diagram."
msgstr ""

#: ../../../usage/extensions/inheritance.rst:38
msgid ""
"Added ``private-bases`` option; previously, all bases were always included."
msgstr ""

#: ../../../usage/extensions/inheritance.rst:42
msgid "Added ``caption`` option"
msgstr ""

#: ../../../usage/extensions/inheritance.rst:45
msgid ""
"It also supports a ``top-classes`` option which requires one or more class "
"names separated by comma. If specified inheritance traversal will stop at "
"the specified class names. Given the following Python module::"
msgstr ""

#: ../../../usage/extensions/inheritance.rst:49
msgid ""
"\"\"\"\n"
"       A\n"
"      / \\\n"
"     B   C\n"
"    / \\ / \\\n"
"   E   D   F\n"
"\"\"\"\n"
"\n"
"class A(object):\n"
"    pass\n"
"\n"
"class B(A):\n"
"    pass\n"
"\n"
"class C(A):\n"
"    pass\n"
"\n"
"class D(B, C):\n"
"    pass\n"
"\n"
"class E(B):\n"
"    pass\n"
"\n"
"class F(C):\n"
"    pass"
msgstr ""

#: ../../../usage/extensions/inheritance.rst:75
msgid "If you have specified a module in the inheritance diagram like this::"
msgstr ""

#: ../../../usage/extensions/inheritance.rst:77
msgid ""
".. inheritance-diagram:: dummy.test\n"
"   :top-classes: dummy.test.B, dummy.test.C"
msgstr ""

#: ../../../usage/extensions/inheritance.rst:80
msgid ""
"any base classes which are ancestors to ``top-classes`` and are also defined "
"in the same module will be rendered as stand alone nodes. In this example "
"class A will be rendered as stand alone node in the graph. This is a known "
"issue due to how this extension works internally."
msgstr ""

#: ../../../usage/extensions/inheritance.rst:85
msgid ""
"If you don't want class A (or any other ancestors) to be visible then "
"specify only the classes you would like to generate the diagram for like "
"this::"
msgstr ""

#: ../../../usage/extensions/inheritance.rst:88
msgid ""
".. inheritance-diagram:: dummy.test.D dummy.test.E dummy.test.F\n"
"   :top-classes: dummy.test.B, dummy.test.C"
msgstr ""

#: ../../../usage/extensions/inheritance.rst:91
msgid "Added ``top-classes`` option to limit the scope of inheritance graphs."
msgstr ""

#: ../../../usage/extensions/inheritance.rst:96
msgid "Configuration"
msgstr ""

#: ../../../usage/extensions/inheritance.rst:100
msgid "A dictionary of graphviz graph attributes for inheritance diagrams."
msgstr ""

#: ../../../usage/extensions/inheritance.rst:102
#: ../../../usage/extensions/inheritance.rst:111
#: ../../../usage/extensions/inheritance.rst:126
msgid "For example::"
msgstr ""

#: ../../../usage/extensions/inheritance.rst:104
msgid ""
"inheritance_graph_attrs = dict(rankdir=\"LR\", size='\"6.0, 8.0\"',\n"
"                               fontsize=14, ratio='compress')"
msgstr ""

#: ../../../usage/extensions/inheritance.rst:109
msgid "A dictionary of graphviz node attributes for inheritance diagrams."
msgstr ""

#: ../../../usage/extensions/inheritance.rst:113
msgid ""
"inheritance_node_attrs = dict(shape='ellipse', fontsize=14, height=0.75,\n"
"                              color='dodgerblue1', style='filled')"
msgstr ""

#: ../../../usage/extensions/inheritance.rst:118
msgid "A dictionary of graphviz edge attributes for inheritance diagrams."
msgstr ""

#: ../../../usage/extensions/inheritance.rst:122
msgid ""
"Allows mapping the full qualified name of the class to custom values (useful "
"when exposing the underlying path of a class is not desirable, e.g. it's a "
"private class and should not be instantiated by the user)."
msgstr ""

#: ../../../usage/extensions/inheritance.rst:128
msgid "inheritance_alias = {'_pytest.Magic': 'pytest.Magic'}"
msgstr ""
