# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, the Sphinx developers
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-03 20:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../extdev/index.rst:4
msgid "Sphinx API"
msgstr ""

#: ../../../extdev/index.rst:6
msgid ""
"Since many projects will need special features in their documentation, "
"Sphinx is designed to be extensible on several levels."
msgstr ""

#: ../../../extdev/index.rst:9
msgid "Here are a few things you can do in an extension:"
msgstr ""

#: ../../../extdev/index.rst:11
msgid ""
"Add new :term:`builder`\\s to support new output formats or actions on the "
"parsed documents."
msgstr ""

#: ../../../extdev/index.rst:13
msgid ""
"Register custom reStructuredText roles and directives, extending the markup "
"using the :doc:`markupapi`."
msgstr ""

#: ../../../extdev/index.rst:15
msgid ""
"Add custom code to so-called \"hook points\" at strategic places throughout "
"the build process, allowing you to register a hook and run specialized code. "
"For example, see the :ref:`events`."
msgstr ""

#: ../../../extdev/index.rst:19
msgid ""
"An extension is simply a Python module with a ``setup()`` function. A user "
"activates the extension by placing the extension's module name (or a sub-"
"module) in their :confval:`extensions` configuration value."
msgstr ""

#: ../../../extdev/index.rst:23
msgid ""
"When :program:`sphinx-build` is executed, Sphinx will attempt to import each "
"module that is listed, and execute ``yourmodule.setup(app)``. This function "
"is used to prepare the extension (e.g., by executing Python code), linking "
"resources that Sphinx uses in the build process (like CSS or HTML files), "
"and notifying Sphinx of everything the extension offers (such as directive "
"or role definitions). The ``app`` argument is an instance of :class:`."
"Sphinx` and gives you control over most aspects of the Sphinx build."
msgstr ""

#: ../../../extdev/index.rst:33
msgid ""
"The configuration file itself can be treated as an extension if it contains "
"a ``setup()`` function.  All other extensions to load must be listed in the :"
"confval:`extensions` configuration value."
msgstr ""

#: ../../../extdev/index.rst:37
msgid ""
"The rest of this page describes some high-level aspects of developing "
"extensions and various parts of Sphinx's behavior that you can control. For "
"some examples of how extensions can be built and used to control different "
"parts of Sphinx, see the :ref:`extension-tutorials-index`."
msgstr ""

#: ../../../extdev/index.rst:45
msgid "Important objects"
msgstr ""

#: ../../../extdev/index.rst:47
msgid ""
"There are several key objects whose API you will use while writing an "
"extension. These are:"
msgstr ""

#: ../../../extdev/index.rst:50
msgid "**Application**"
msgstr ""

#: ../../../extdev/index.rst:51
msgid ""
"The application object (usually called ``app``) is an instance of :class:`."
"Sphinx`.  It controls most high-level functionality, such as the setup of "
"extensions, event dispatching and producing output (logging)."
msgstr ""

#: ../../../extdev/index.rst:55
msgid ""
"If you have the environment object, the application is available as ``env."
"app``."
msgstr ""

#: ../../../extdev/index.rst:58
msgid "**Environment**"
msgstr ""

#: ../../../extdev/index.rst:59
msgid ""
"The build environment object (usually called ``env``) is an instance of :"
"class:`.BuildEnvironment`.  It is responsible for parsing the source "
"documents, stores all metadata about the document collection and is "
"serialized to disk after each build."
msgstr ""

#: ../../../extdev/index.rst:64
msgid ""
"Its API provides methods to do with access to metadata, resolving "
"references, etc.  It can also be used by extensions to cache information "
"that should persist for incremental rebuilds."
msgstr ""

#: ../../../extdev/index.rst:68
msgid ""
"If you have the application or builder object, the environment is available "
"as ``app.env`` or ``builder.env``."
msgstr ""

#: ../../../extdev/index.rst:71
msgid "**Builder**"
msgstr ""

#: ../../../extdev/index.rst:72
msgid ""
"The builder object (usually called ``builder``) is an instance of a specific "
"subclass of :class:`.Builder`.  Each builder class knows how to convert the "
"parsed documents into an output format, or otherwise process them (e.g. "
"check external links)."
msgstr ""

#: ../../../extdev/index.rst:77
msgid ""
"If you have the application object, the builder is available as ``app."
"builder``."
msgstr ""

#: ../../../extdev/index.rst:80
msgid "**Config**"
msgstr ""

#: ../../../extdev/index.rst:81
msgid ""
"The config object (usually called ``config``) provides the values of "
"configuration values set in :file:`conf.py` as attributes.  It is an "
"instance of :class:`.Config`."
msgstr ""

#: ../../../extdev/index.rst:85
msgid "The config is available as ``app.config`` or ``env.config``."
msgstr ""

#: ../../../extdev/index.rst:87
msgid ""
"To see an example of use of these objects, refer to :ref:`the tutorials "
"<extension-tutorials-index>`."
msgstr ""

#: ../../../extdev/index.rst:93 ../../../extdev/index.rst:98
msgid "Build phases"
msgstr ""

#: ../../../extdev/index.rst:95
msgid ""
"One thing that is vital in order to understand extension mechanisms is the "
"way in which a Sphinx project is built: this works in several phases."
msgstr ""

#: ../../../extdev/index.rst:101
msgid "**Phase 0: Initialization**"
msgstr ""

#: ../../../extdev/index.rst:103
msgid ""
"In this phase, almost nothing of interest to us happens.  The source "
"directory is searched for source files, and extensions are initialized. "
"Should a stored build environment exist, it is loaded, otherwise a new one "
"is created."
msgstr ""

#: ../../../extdev/index.rst:108
msgid "**Phase 1: Reading**"
msgstr ""

#: ../../../extdev/index.rst:110
msgid ""
"In Phase 1, all source files (and on subsequent builds, those that are new "
"or changed) are read and parsed.  This is the phase where directives and "
"roles are encountered by docutils, and the corresponding code is executed.  "
"The output of this phase is a *doctree* for each source file; that is a tree "
"of docutils nodes.  For document elements that aren't fully known until all "
"existing files are read, temporary nodes are created."
msgstr ""

#: ../../../extdev/index.rst:117
msgid ""
"There are nodes provided by docutils, which are documented `in the docutils "
"documentation <https://docutils.sourceforge.io/docs/ref/doctree.html>`__. "
"Additional nodes are provided by Sphinx and :ref:`documented here <nodes>`."
msgstr ""

#: ../../../extdev/index.rst:121
msgid ""
"During reading, the build environment is updated with all meta- and cross "
"reference data of the read documents, such as labels, the names of headings, "
"described Python objects and index entries.  This will later be used to "
"replace the temporary nodes."
msgstr ""

#: ../../../extdev/index.rst:126
msgid ""
"The parsed doctrees are stored on the disk, because it is not possible to "
"hold all of them in memory."
msgstr ""

#: ../../../extdev/index.rst:129
msgid "**Phase 2: Consistency checks**"
msgstr ""

#: ../../../extdev/index.rst:131
msgid "Some checking is done to ensure no surprises in the built documents."
msgstr ""

#: ../../../extdev/index.rst:133
msgid "**Phase 3: Resolving**"
msgstr ""

#: ../../../extdev/index.rst:135
msgid ""
"Now that the metadata and cross-reference data of all existing documents is "
"known, all temporary nodes are replaced by nodes that can be converted into "
"output using components called transforms.  For example, links are created "
"for object references that exist, and simple literal nodes are created for "
"those that don't."
msgstr ""

#: ../../../extdev/index.rst:141
msgid "**Phase 4: Writing**"
msgstr ""

#: ../../../extdev/index.rst:143
msgid ""
"This phase converts the resolved doctrees to the desired output format, such "
"as HTML or LaTeX.  This happens via a so-called docutils writer that visits "
"the individual nodes of each doctree and produces some output in the process."
msgstr ""

#: ../../../extdev/index.rst:149
msgid ""
"Some builders deviate from this general build plan, for example, the builder "
"that checks external links does not need anything more than the parsed "
"doctrees and therefore does not have phases 2--4."
msgstr ""

#: ../../../extdev/index.rst:153
msgid ""
"To see an example of application, refer to :ref:`tutorial-extend-build`."
msgstr ""

#: ../../../extdev/index.rst:158
msgid "Extension metadata"
msgstr ""

#: ../../../extdev/index.rst:162
msgid ""
"The ``setup()`` function should return a dictionary. This is treated by "
"Sphinx as metadata of the extension. Metadata keys currently recognized are:"
msgstr ""

#: ../../../extdev/index.rst:166
msgid "``'version'``"
msgstr ""

#: ../../../extdev/index.rst:167
msgid ""
"A string that identifies the extension version. It is used for extension "
"version requirement checking (see :confval:`needs_extensions`) and "
"informational purposes. If no version string is returned, ``'unknown "
"version'`` is used by default."
msgstr ""

#: ../../../extdev/index.rst:172
msgid "``'env_version'``"
msgstr ""

#: ../../../extdev/index.rst:173
msgid ""
"A non-zero positive integer integer that records the version of data stored "
"in the environment by the extension."
msgstr ""

#: ../../../extdev/index.rst:177
msgid ""
"If ``'env_version'`` is not set, the extension **must not** store any data "
"or state directly on the environment object  (``env``)."
msgstr ""

#: ../../../extdev/index.rst:180
msgid ""
"This key must be defined if the extension uses the ``env`` object to store "
"data. The version number must be incremented whenever the type, structure,  "
"or meaning of the stored data change, to ensure Sphinx does not try and load "
"invalid data from a cached environment."
msgstr ""

#: ../../../extdev/index.rst:187
msgid "``'parallel_read_safe'``"
msgstr ""

#: ../../../extdev/index.rst:188
msgid ""
"A boolean that specifies if parallel reading of source files can be used "
"when the extension is loaded. It defaults to ``False``, meaning that you "
"have to explicitly specify your extension to be safe for parallel reading "
"after checking that it is."
msgstr ""

#: ../../../extdev/index.rst:195
msgid ""
"When *parallel-read-safe* is ``True``, the extension must satisfy the "
"following conditions:"
msgstr ""

#: ../../../extdev/index.rst:198
msgid ""
"The core logic of the extension is parallelly executable during the reading "
"phase."
msgstr ""

#: ../../../extdev/index.rst:200
msgid ""
"It has event handlers for :event:`env-merge-info` and :event:`env-purge-doc` "
"events if it stores data to the build environment object (``env``) during "
"the reading phase."
msgstr ""

#: ../../../extdev/index.rst:204
msgid "``'parallel_write_safe'``"
msgstr ""

#: ../../../extdev/index.rst:205
msgid ""
"A boolean that specifies if parallel writing of output files can be used "
"when the extension is loaded. Since extensions usually don't negatively "
"influence the process, this defaults to ``True``."
msgstr ""

#: ../../../extdev/index.rst:212
msgid ""
"When *parallel-write-safe* is ``True``, the extension must satisfy the "
"following conditions:"
msgstr ""

#: ../../../extdev/index.rst:215
msgid ""
"The core logic of the extension is parallelly executable during the writing "
"phase."
msgstr ""

#: ../../../extdev/index.rst:220
msgid "APIs used for writing extensions"
msgstr ""

#: ../../../extdev/index.rst:222
msgid ""
"These sections provide a more complete description of the tools at your "
"disposal when developing Sphinx extensions. Some are core to Sphinx (such as "
"the :doc:`appapi`) while others trigger specific behavior (such as the :doc:"
"`i18n`)"
msgstr ""
