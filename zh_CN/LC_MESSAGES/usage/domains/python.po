# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, the Sphinx developers
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-03 20:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../usage/domains/python.rst:5
msgid "The Python Domain"
msgstr ""

#: ../../../usage/domains/python.rst:9
msgid ""
"The Python domain (name **py**) provides the following directives for module "
"declarations:"
msgstr ""

#: ../../../usage/domains/python.rst:14
msgid ""
"This directive marks the beginning of the description of a module (or "
"package submodule, in which case the name should be fully qualified, "
"including the package name).  A description of the module such as the "
"docstring can be placed in the body of the directive."
msgstr ""

#: ../../../usage/domains/python.rst:19
msgid "This directive will also cause an entry in the global module index."
msgstr ""

#: ../../../usage/domains/python.rst:23
msgid "Module directives support body content."
msgstr ""

#: ../../../usage/domains/python.rst:26 ../../../usage/domains/python.rst:83
#: ../../../usage/domains/python.rst:132 ../../../usage/domains/python.rst:178
#: ../../../usage/domains/python.rst:232 ../../../usage/domains/python.rst:292
#: ../../../usage/domains/python.rst:336 ../../../usage/domains/python.rst:407
#: ../../../usage/domains/python.rst:440
msgid "options"
msgstr ""

#: ../../../usage/domains/python.rst:30
msgid ""
"Indicate platforms which the module is available (if it is available on all "
"platforms, the option should be omitted).  The keys are short identifiers; "
"examples that are in use include \"IRIX\", \"Mac\", \"Windows\" and "
"\"Unix\".  It is important to use a key which has already been used when "
"applicable."
msgstr ""

#: ../../../usage/domains/python.rst:39
msgid ""
"Consist of one sentence describing the module's purpose -- it is currently "
"only used in the Global Module Index."
msgstr ""

#: ../../../usage/domains/python.rst:45
msgid ""
"Mark a module as deprecated; it will be designated as such in various "
"locations then."
msgstr ""

#: ../../../usage/domains/python.rst:51
msgid ""
"This directive tells Sphinx that the classes, functions etc. documented from "
"here are in the given module (like :rst:dir:`py:module`), but it will not "
"create index entries, an entry in the Global Module Index, or a link target "
"for :rst:role:`py:mod`.  This is helpful in situations where documentation "
"for things in a module is spread over multiple files or sections -- one "
"location has the :rst:dir:`py:module` directive, the others only :rst:dir:"
"`py:currentmodule`."
msgstr ""

#: ../../../usage/domains/python.rst:59
msgid "The following directives are provided for module and class contents:"
msgstr ""

#: ../../../usage/domains/python.rst:64
msgid ""
"Describes a module-level function. The signature should include the "
"parameters, together with optional type parameters, as given in the Python "
"function definition, see :ref:`signatures`. For example::"
msgstr ""

#: ../../../usage/domains/python.rst:70
msgid ""
".. py:function:: Timer.repeat(repeat=3, number=1_000_000)\n"
".. py:function:: add[T](a: T, b: T) -> T"
msgstr ""

#: ../../../usage/domains/python.rst:73
msgid "For methods you should use :rst:dir:`py:method`."
msgstr ""

#: ../../../usage/domains/python.rst:75
msgid ""
"The description normally includes information about the parameters required "
"and how they are used (especially whether mutable objects passed as "
"parameters are modified), side effects, and possible exceptions."
msgstr ""

#: ../../../usage/domains/python.rst:79
msgid ""
"This information can (in any ``py`` directive) optionally be given in a "
"structured form, see :ref:`info-field-lists`."
msgstr ""

#: ../../../usage/domains/python.rst:87
msgid "Indicate the function is an async function."
msgstr ""

#: ../../../usage/domains/python.rst:94 ../../../usage/domains/python.rst:158
#: ../../../usage/domains/python.rst:250 ../../../usage/domains/python.rst:318
#: ../../../usage/domains/python.rst:469
msgid ""
"Describe the location where the object is defined if the object is imported "
"from other modules"
msgstr ""

#: ../../../usage/domains/python.rst:108
msgid ""
"Ensures that the function's arguments will be emitted on a single logical "
"line, overriding :confval:`python_maximum_signature_line_length` and :"
"confval:`maximum_signature_line_length`."
msgstr ""

#: ../../../usage/domains/python.rst:117
msgid ""
"Ensure that the function's type parameters are emitted on a single logical "
"line, overriding :confval:`python_maximum_signature_line_length` and :"
"confval:`maximum_signature_line_length`."
msgstr ""

#: ../../../usage/domains/python.rst:126
msgid ""
"Describes global data in a module, including both variables and values used "
"as \"defined constants.\" Consider using :rst:dir:`py:type` for type aliases "
"instead and :rst:dir:`py:attribute` for class variables and instance "
"attributes."
msgstr ""

#: ../../../usage/domains/python.rst:136 ../../../usage/domains/python.rst:296
#: ../../../usage/domains/python.rst:364
msgid ""
"This will be parsed as a Python expression for cross-referencing the type "
"annotation. As such, the argument to ``:type:`` should be a valid "
"`annotation expression`_."
msgstr ""

#: ../../../usage/domains/python.rst:141 ../../../usage/domains/python.rst:301
#: ../../../usage/domains/python.rst:369
msgid ""
"The valid syntax for the ``:type:`` directive option differs from the syntax "
"for the ``:type:`` `info field <info-field-lists_>`__. The ``:type:`` "
"directive option does not understand reStructuredText markup or the ``or`` "
"or ``of`` keywords, meaning unions must use ``|`` and sequences must use "
"square brackets, and roles such as ``:ref:`...``` cannot be used."
msgstr ""

#: ../../../usage/domains/python.rst:173
msgid ""
"Describes an exception class. The signature can, but need not include "
"parentheses with constructor arguments, or may optionally include type "
"parameters (see :pep:`695`)."
msgstr ""

#: ../../../usage/domains/python.rst:182 ../../../usage/domains/python.rst:258
msgid "Indicate the class is a final class."
msgstr ""

#: ../../../usage/domains/python.rst:195
msgid "See :rst:dir:`py:class:single-line-parameter-list`."
msgstr ""

#: ../../../usage/domains/python.rst:202
msgid "See :rst:dir:`py:class:single-line-type-parameter-list`."
msgstr ""

#: ../../../usage/domains/python.rst:210
msgid ""
"Describes a class. The signature can optionally include type parameters "
"(see :pep:`695`) or parentheses with parameters which will be shown as the "
"constructor arguments. See also :ref:`signatures`."
msgstr ""

#: ../../../usage/domains/python.rst:215
msgid ""
"Methods and attributes belonging to the class should be placed in this "
"directive's body.  If they are placed outside, the supplied name should "
"contain the class name so that cross-references still work.  Example::"
msgstr ""

#: ../../../usage/domains/python.rst:219
msgid ""
".. py:class:: Foo\n"
"\n"
"   .. py:method:: quux()\n"
"\n"
"-- or --\n"
"\n"
".. py:class:: Bar\n"
"\n"
".. py:method:: Bar.quux()"
msgstr ""

#: ../../../usage/domains/python.rst:229
msgid "The first way is the preferred one."
msgstr ""

#: ../../../usage/domains/python.rst:236
msgid ""
"Indicate that the class is an abstract base class. This produces the "
"following output:"
msgstr ""

#: ../../../usage/domains/python.rst:243
msgid "A cheesy representation."
msgstr ""

#: ../../../usage/domains/python.rst:271
msgid ""
"Ensures that the class constructor's arguments will be emitted on a single "
"logical line, overriding :confval:`python_maximum_signature_line_length` "
"and :confval:`maximum_signature_line_length`."
msgstr ""

#: ../../../usage/domains/python.rst:280
msgid ""
"Ensure that the class type parameters are emitted on a single logical line, "
"overriding :confval:`python_maximum_signature_line_length` and :confval:"
"`maximum_signature_line_length`."
msgstr ""

#: ../../../usage/domains/python.rst:286
msgid ""
"Describes an object data attribute.  The description should include "
"information about the type of the data to be expected and whether it may be "
"changed directly. Type aliases should be documented with :rst:dir:`py:type`."
msgstr ""

#: ../../../usage/domains/python.rst:331
msgid "Describes an object property."
msgstr ""

#: ../../../usage/domains/python.rst:341
msgid "Indicate the property is abstract. This produces the following output:"
msgstr ""

#: ../../../usage/domains/python.rst:348
msgid "Cheese levels at the *National Cheese Emporium*."
msgstr ""

#: ../../../usage/domains/python.rst:352 ../../../usage/domains/python.rst:457
msgid "The ``:abstract:`` alias is also supported."
msgstr ""

#: ../../../usage/domains/python.rst:357
msgid "Indicate the property is a classmethod."
msgstr ""

#: ../../../usage/domains/python.rst:384
msgid "Describe a :ref:`type alias <python:type-aliases>`."
msgstr ""

#: ../../../usage/domains/python.rst:386
msgid ""
"The type that the alias represents should be described with the :rst:dir:`!"
"canonical` option. This directive supports an optional description body."
msgstr ""

#: ../../../usage/domains/python.rst:390
msgid "For example:"
msgstr ""

#: ../../../usage/domains/python.rst:392
msgid ""
".. py:type:: UInt64\n"
"\n"
"   Represent a 64-bit positive integer."
msgstr ""

#: ../../../usage/domains/python.rst:398
msgid "will be rendered as follows:"
msgstr ""

#: ../../../usage/domains/python.rst:404
msgid "Represent a 64-bit positive integer."
msgstr ""

#: ../../../usage/domains/python.rst:411
msgid "The canonical type represented by this alias, for example:"
msgstr ""

#: ../../../usage/domains/python.rst:413
msgid ""
".. py:type:: StrPattern\n"
"   :canonical: str | re.Pattern[str]\n"
"\n"
"   Represent a regular expression or a compiled pattern."
msgstr ""

#: ../../../usage/domains/python.rst:420
msgid "This is rendered as:"
msgstr ""

#: ../../../usage/domains/python.rst:427
msgid "Represent a regular expression or a compiled pattern."
msgstr ""

#: ../../../usage/domains/python.rst:434
msgid ""
"Describes an object method.  The parameters should not include the ``self`` "
"parameter.  The description should include similar information to that "
"described for ``function``.  See also :ref:`signatures` and :ref:`info-field-"
"lists`."
msgstr ""

#: ../../../usage/domains/python.rst:445
msgid ""
"Indicate the method is an abstract method. This produces the following "
"output:"
msgstr ""

#: ../../../usage/domains/python.rst:452
msgid "Order more cheese (we're fresh out!)."
msgstr ""

#: ../../../usage/domains/python.rst:462
msgid "Indicate the method is an async method."
msgstr ""

#: ../../../usage/domains/python.rst:477
msgid "Indicate the method is a class method."
msgstr ""

#: ../../../usage/domains/python.rst:484
msgid "Indicate the method is a final method."
msgstr ""

#: ../../../usage/domains/python.rst:497
msgid ""
"Ensures that the method's arguments will be emitted on a single logical "
"line, overriding :confval:`python_maximum_signature_line_length` and :"
"confval:`maximum_signature_line_length`."
msgstr ""

#: ../../../usage/domains/python.rst:506
msgid ""
"Ensure that the method's type parameters are emitted on a single logical "
"line, overriding :confval:`python_maximum_signature_line_length` and :"
"confval:`maximum_signature_line_length`."
msgstr ""

#: ../../../usage/domains/python.rst:515
msgid "Indicate the method is a static method."
msgstr ""

#: ../../../usage/domains/python.rst:523
msgid ""
"Like :rst:dir:`py:method`, but indicates that the method is a static method."
msgstr ""

#: ../../../usage/domains/python.rst:530
msgid ""
"Like :rst:dir:`py:method`, but indicates that the method is a class method."
msgstr ""

#: ../../../usage/domains/python.rst:538
msgid ""
"Describes a decorator function.  The signature should represent the usage as "
"a decorator.  For example, given the functions"
msgstr ""

#: ../../../usage/domains/python.rst:541
msgid ""
"def removename(func):\n"
"    func.__name__ = ''\n"
"    return func\n"
"\n"
"def setnewname(name):\n"
"    def decorator(func):\n"
"        func.__name__ = name\n"
"        return func\n"
"    return decorator"
msgstr ""

#: ../../../usage/domains/python.rst:553
msgid "the descriptions should look like this::"
msgstr ""

#: ../../../usage/domains/python.rst:555
msgid ""
".. py:decorator:: removename\n"
"\n"
"   Remove name of the decorated function.\n"
"\n"
".. py:decorator:: setnewname(name)\n"
"\n"
"   Set name of the decorated function to *name*."
msgstr ""

#: ../../../usage/domains/python.rst:563
msgid "(as opposed to ``.. py:decorator:: removename(func)``.)"
msgstr ""

#: ../../../usage/domains/python.rst:565
msgid "Refer to a decorator function using the :rst:role:`py:deco` role."
msgstr ""

#: ../../../usage/domains/python.rst:570
msgid ""
"Ensures that the decorator's arguments will be emitted on a single logical "
"line, overriding :confval:`python_maximum_signature_line_length` and :"
"confval:`maximum_signature_line_length`."
msgstr ""

#: ../../../usage/domains/python.rst:579
msgid ""
"Ensure that the decorator's type parameters are emitted on a single logical "
"line, overriding :confval:`python_maximum_signature_line_length` and :"
"confval:`maximum_signature_line_length`."
msgstr ""

#: ../../../usage/domains/python.rst:589
msgid "Same as :rst:dir:`py:decorator`, but for decorators that are methods."
msgstr ""

#: ../../../usage/domains/python.rst:591
msgid "Refer to a decorator method using the :rst:role:`py:deco` role."
msgstr ""

#: ../../../usage/domains/python.rst:598
msgid "Python Signatures"
msgstr ""

#: ../../../usage/domains/python.rst:600
msgid ""
"Signatures of functions, methods and class constructors can be given like "
"they would be written in Python. This can include default values, positional-"
"only or keyword-only parameters, type annotations, and type parameters. For "
"example:"
msgstr ""

#: ../../../usage/domains/python.rst:606
msgid ""
".. py:function:: compile(source: str, filename: Path, symbol: str = 'file') -"
"> ast.AST"
msgstr ""

#: ../../../usage/domains/python.rst:613
msgid ""
"For functions with optional parameters that don't have default values "
"(typically functions implemented in C extension modules without keyword "
"argument support), you can list multiple versions of the same signature in a "
"single directive:"
msgstr ""

#: ../../../usage/domains/python.rst:623
msgid ""
"Another approach is to use square brackets to specify the optional parts. "
"When using square brackets, it is customary to place the opening bracket "
"before the comma (``[,``)."
msgstr ""

#: ../../../usage/domains/python.rst:630
msgid ""
"Python 3.12 introduced *type parameters*, which are type variables declared "
"directly within the class or function definition:"
msgstr ""

#: ../../../usage/domains/python.rst:633
msgid ""
"class AnimalList[AnimalT](list[AnimalT]):\n"
"    ...\n"
"\n"
"def add[T](a: T, b: T) -> T:\n"
"    return a + b"
msgstr ""

#: ../../../usage/domains/python.rst:641
msgid "The corresponding reStructuredText markup would be:"
msgstr ""

#: ../../../usage/domains/python.rst:643
msgid ""
".. py:class:: AnimalList[AnimalT]\n"
"\n"
".. py:function:: add[T](a: T, b: T) -> T"
msgstr ""

#: ../../../usage/domains/python.rst:651
msgid ":pep:`695` and :pep:`696`, for details and the full specification."
msgstr ""

#: ../../../usage/domains/python.rst:657
msgid "Info field lists"
msgstr ""

#: ../../../usage/domains/python.rst:662
msgid "meta fields are added."
msgstr ""

#: ../../../usage/domains/python.rst:664
msgid ""
"Inside Python object description directives, reStructuredText field lists "
"with these fields are recognized and formatted nicely:"
msgstr ""

#: ../../../usage/domains/python.rst:668
msgid ""
"``param``, ``parameter``, ``arg``, ``argument``, ``key``, ``keyword``: "
"Description of a parameter."
msgstr ""

#: ../../../usage/domains/python.rst:670
msgid "``type``: Type of a parameter.  Creates a link if possible."
msgstr ""

#: ../../../usage/domains/python.rst:671
msgid ""
"``raises``, ``raise``, ``except``, ``exception``: That (and when) a specific "
"exception is raised."
msgstr ""

#: ../../../usage/domains/python.rst:673
msgid "``var``, ``ivar``, ``cvar``: Description of a variable."
msgstr ""

#: ../../../usage/domains/python.rst:674
msgid "``vartype``: Type of a variable.  Creates a link if possible."
msgstr ""

#: ../../../usage/domains/python.rst:675
msgid "``returns``, ``return``: Description of the return value."
msgstr ""

#: ../../../usage/domains/python.rst:676
msgid "``rtype``: Return type.  Creates a link if possible."
msgstr ""

#: ../../../usage/domains/python.rst:677
msgid ""
"``meta``: Add metadata to description of the python object.  The metadata "
"will not be shown on output document.  For example, ``:meta private:`` "
"indicates the python object is private member.  It is used in :py:mod:"
"`sphinx.ext.autodoc` for filtering members."
msgstr ""

#: ../../../usage/domains/python.rst:684
msgid ""
"In current release, all ``var``, ``ivar`` and ``cvar`` are represented as "
"\"Variable\".  There is no difference at all."
msgstr ""

#: ../../../usage/domains/python.rst:687
msgid ""
"The field names must consist of one of these keywords and an argument "
"(except for ``returns`` and ``rtype``, which do not need an argument).  This "
"is best explained by an example::"
msgstr ""

#: ../../../usage/domains/python.rst:691
msgid ""
".. py:function:: send_message(sender, recipient, message_body, "
"[priority=1])\n"
"\n"
"   Send a message to a recipient\n"
"\n"
"   :param str sender: The person sending the message\n"
"   :param str recipient: The recipient of the message\n"
"   :param str message_body: The body of the message\n"
"   :param priority: The priority of the message, can be a number 1-5\n"
"   :type priority: int or None\n"
"   :return: the message id\n"
"   :rtype: int\n"
"   :raises ValueError: if the message_body exceeds 160 characters\n"
"   :raises TypeError: if the message_body is not a basestring"
msgstr ""

#: ../../../usage/domains/python.rst:705
msgid "This will render like this:"
msgstr ""

#: ../../../usage/domains/python.rst:711
msgid "Send a message to a recipient"
msgstr ""

#: ../../../usage/domains/python.rst:0
msgid "Parameters"
msgstr ""

#: ../../../usage/domains/python.rst:713
msgid "The person sending the message"
msgstr ""

#: ../../../usage/domains/python.rst:714
msgid "The recipient of the message"
msgstr ""

#: ../../../usage/domains/python.rst:715
msgid "The body of the message"
msgstr ""

#: ../../../usage/domains/python.rst:716
msgid "The priority of the message, can be a number 1-5"
msgstr ""

#: ../../../usage/domains/python.rst:0
msgid "Returns"
msgstr ""

#: ../../../usage/domains/python.rst:718
msgid "the message id"
msgstr ""

#: ../../../usage/domains/python.rst:0
msgid "Return type"
msgstr ""

#: ../../../usage/domains/python.rst:0
msgid "Raises"
msgstr ""

#: ../../../usage/domains/python.rst:720
msgid "if the message_body exceeds 160 characters"
msgstr ""

#: ../../../usage/domains/python.rst:721
msgid "if the message_body is not a basestring"
msgstr ""

#: ../../../usage/domains/python.rst:723
msgid ""
"It is also possible to combine parameter type and description, if the type "
"is a single word, like this::"
msgstr ""

#: ../../../usage/domains/python.rst:726
msgid ":param int priority: The priority of the message, can be a number 1-5"
msgstr ""

#: ../../../usage/domains/python.rst:730
msgid ""
"Container types such as lists and dictionaries can be linked automatically "
"using the following syntax::"
msgstr ""

#: ../../../usage/domains/python.rst:733
msgid ""
":type priorities: list(int)\n"
":type priorities: list[int]\n"
":type mapping: dict(str, int)\n"
":type mapping: dict[str, int]\n"
":type point: tuple(float, float)\n"
":type point: tuple[float, float]"
msgstr ""

#: ../../../usage/domains/python.rst:740
msgid ""
"Multiple types in a type field will be linked automatically if separated by "
"either the vertical bar (``|``) or the word \"or\"::"
msgstr ""

#: ../../../usage/domains/python.rst:743
msgid ""
":type an_arg: int or None\n"
":vartype a_var: str or int\n"
":rtype: float or str\n"
"\n"
":type an_arg: int | None\n"
":vartype a_var: str | int\n"
":rtype: float | str"
msgstr ""

#: ../../../usage/domains/python.rst:754
msgid "Cross-referencing Python objects"
msgstr ""

#: ../../../usage/domains/python.rst:756
msgid ""
"The following roles refer to objects in modules and are possibly hyperlinked "
"if a matching identifier is found:"
msgstr ""

#: ../../../usage/domains/python.rst:761
msgid ""
"Reference a module; a dotted name may be used.  This should also be used for "
"package names."
msgstr ""

#: ../../../usage/domains/python.rst:766
msgid ""
"Reference a Python function; dotted names may be used.  The role text needs "
"not include trailing parentheses to enhance readability; they will be added "
"automatically by Sphinx if the :confval:`add_function_parentheses` config "
"value is ``True`` (the default)."
msgstr ""

#: ../../../usage/domains/python.rst:773
msgid ""
"Reference a Python decorator; dotted names may be used. The rendered output "
"will be prepended with an at-sign (``@``), for example: ``:py:deco:"
"`removename``` produces :py:deco:`removename`."
msgstr ""

#: ../../../usage/domains/python.rst:784
msgid "Reference a module-level variable."
msgstr ""

#: ../../../usage/domains/python.rst:788
msgid ""
"Reference a \"defined\" constant.  This may be a Python variable that is not "
"intended to be changed."
msgstr ""

#: ../../../usage/domains/python.rst:793
msgid "Reference a class; a dotted name may be used."
msgstr ""

#: ../../../usage/domains/python.rst:797
msgid ""
"Reference a method of an object.  The role text can include the type name "
"and the method name; if it occurs within the description of a type, the type "
"name can be omitted.  A dotted name may be used."
msgstr ""

#: ../../../usage/domains/python.rst:803
msgid "Reference a data attribute of an object."
msgstr ""

#: ../../../usage/domains/python.rst:805
msgid "The role is also able to refer to property."
msgstr ""

#: ../../../usage/domains/python.rst:809
msgid "Reference a type alias."
msgstr ""

#: ../../../usage/domains/python.rst:813
msgid "Reference an exception.  A dotted name may be used."
msgstr ""

#: ../../../usage/domains/python.rst:817
msgid ""
"Reference an object of unspecified type.  Useful e.g. as the :confval:"
"`default_role`."
msgstr ""

#: ../../../usage/domains/python.rst:824
msgid "Target specification"
msgstr ""

#: ../../../usage/domains/python.rst:826
msgid ""
"The target can be specified as a fully qualified name (e.g. ``:py:meth:"
"`my_module.MyClass.my_method```) or any shortened version (e.g. ``:py:meth:"
"`MyClass.my_method``` or ``:py:meth:`my_method```). See `target resolution`_ "
"for details on the resolution of shortened names."
msgstr ""

#: ../../../usage/domains/python.rst:832
msgid ""
":ref:`Cross-referencing modifiers <xref-modifiers>` can be applied. In short:"
msgstr ""

#: ../../../usage/domains/python.rst:835
msgid ""
"You may supply an explicit title and reference target: ``:py:mod:"
"`mathematical functions <math>``` will refer to the ``math`` module, but the "
"link text will be \"mathematical functions\"."
msgstr ""

#: ../../../usage/domains/python.rst:839
msgid ""
"If you prefix the content with an exclamation mark (``!``), no reference/"
"hyperlink will be created."
msgstr ""

#: ../../../usage/domains/python.rst:842
msgid ""
"If you prefix the content with ``~``, the link text will only be the last "
"component of the target. For example, ``:py:meth:`~queue.Queue.get``` will "
"refer to ``queue.Queue.get`` but only display ``get`` as the link text."
msgstr ""

#: ../../../usage/domains/python.rst:849
msgid "Target resolution"
msgstr ""

#: ../../../usage/domains/python.rst:851
msgid ""
"A given link target name is resolved to an object using the following "
"strategy:"
msgstr ""

#: ../../../usage/domains/python.rst:853
msgid ""
"Names in these roles are searched first without any further qualification, "
"then with the current module name prepended, then with the current module "
"and class name (if any) prepended."
msgstr ""

#: ../../../usage/domains/python.rst:857
msgid ""
"If you prefix the name with a dot (``.``), this order is reversed. For "
"example, in the documentation of Python's :py:mod:`codecs` module, ``:py:"
"func:`open``` always refers to the built-in function, while ``:py:func:`."
"open``` refers to :func:`codecs.open`."
msgstr ""

#: ../../../usage/domains/python.rst:862
msgid ""
"A similar heuristic is used to determine whether the name is an attribute of "
"the currently documented class."
msgstr ""

#: ../../../usage/domains/python.rst:865
msgid ""
"Also, if the name is prefixed with a dot, and no exact match is found, the "
"target is taken as a suffix and all object names with that suffix are "
"searched. For example, ``:py:meth:`.TarFile.close``` references the "
"``tarfile.TarFile.close()`` function, even if the current module is not "
"``tarfile``.  Since this can get ambiguous, if there is more than one "
"possible match, you will get a warning from Sphinx."
msgstr ""

#: ../../../usage/domains/python.rst:872
msgid ""
"Note that you can combine the ``~`` and ``.`` prefixes: ``:py:meth:`~."
"TarFile.close``` will reference the ``tarfile.TarFile.close()`` method, but "
"the visible link caption will only be ``close()``."
msgstr ""
