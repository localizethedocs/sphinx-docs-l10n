# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, the Sphinx developers
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-03 20:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../usage/domains/cpp.rst:5
msgid "The C++ Domain"
msgstr ""

#: ../../../usage/domains/cpp.rst:9
msgid "The C++ domain (name **cpp**) supports documenting C++ projects."
msgstr ""

#: ../../../usage/domains/cpp.rst:12
msgid "Directives for Declaring Entities"
msgstr ""

#: ../../../usage/domains/cpp.rst:14
msgid ""
"The following directives are available. All declarations can start with a "
"visibility statement (``public``, ``private`` or ``protected``)."
msgstr ""

#: ../../../usage/domains/cpp.rst:20
msgid ""
"Describe a class/struct, possibly with specification of inheritance, e.g.,::"
msgstr ""

#: ../../../usage/domains/cpp.rst:22
msgid ".. cpp:class:: MyClass : public MyBase, MyOtherBase"
msgstr ""

#: ../../../usage/domains/cpp.rst:24
msgid ""
"The difference between :rst:dir:`cpp:class` and :rst:dir:`cpp:struct` is "
"only cosmetic: the prefix rendered in the output, and the specifier shown in "
"the index."
msgstr ""

#: ../../../usage/domains/cpp.rst:28
msgid "The class can be directly declared inside a nested scope, e.g.,::"
msgstr ""

#: ../../../usage/domains/cpp.rst:30
msgid ".. cpp:class:: OuterScope::MyClass : public MyBase, MyOtherBase"
msgstr ""

#: ../../../usage/domains/cpp.rst:32
msgid "A class template can be declared::"
msgstr ""

#: ../../../usage/domains/cpp.rst:34
msgid ".. cpp:class:: template<typename T, std::size_t N> std::array"
msgstr ""

#: ../../../usage/domains/cpp.rst:36
msgid "or with a line break::"
msgstr ""

#: ../../../usage/domains/cpp.rst:38
msgid ""
".. cpp:class:: template<typename T, std::size_t N> \\\n"
"               std::array"
msgstr ""

#: ../../../usage/domains/cpp.rst:41
msgid "Full and partial template specialisations can be declared::"
msgstr ""

#: ../../../usage/domains/cpp.rst:43
msgid ""
".. cpp:class:: template<> \\\n"
"               std::array<bool, 256>\n"
"\n"
".. cpp:class:: template<typename T> \\\n"
"               std::array<T, 42>"
msgstr ""

#: ../../../usage/domains/cpp.rst:49
msgid "The :rst:dir:`cpp:struct` directive."
msgstr ""

#: ../../../usage/domains/cpp.rst:54
msgid "Describe a function or member function, e.g.,::"
msgstr ""

#: ../../../usage/domains/cpp.rst:56
msgid ""
".. cpp:function:: bool myMethod(int arg1, std::string arg2)\n"
"\n"
"   A function with parameters and types.\n"
"\n"
".. cpp:function:: bool myMethod(int, double)\n"
"\n"
"   A function with unnamed parameters.\n"
"\n"
".. cpp:function:: const T &MyClass::operator[](std::size_t i) const\n"
"\n"
"   An overload for the indexing operator.\n"
"\n"
".. cpp:function:: operator bool() const\n"
"\n"
"   A casting operator.\n"
"\n"
".. cpp:function:: constexpr void foo(std::string &bar[2]) noexcept\n"
"\n"
"   A constexpr function.\n"
"\n"
".. cpp:function:: MyClass::MyClass(const MyClass&) = default\n"
"\n"
"   A copy constructor with default implementation."
msgstr ""

#: ../../../usage/domains/cpp.rst:80
msgid "Function templates can also be described::"
msgstr ""

#: ../../../usage/domains/cpp.rst:82
msgid ""
".. cpp:function:: template<typename U> \\\n"
"                  void print(U &&u)"
msgstr ""

#: ../../../usage/domains/cpp.rst:85
msgid "and function template specialisations::"
msgstr ""

#: ../../../usage/domains/cpp.rst:87
msgid ""
".. cpp:function:: template<> \\\n"
"                  void print(int i)"
msgstr ""

#: ../../../usage/domains/cpp.rst:93
msgid ""
"Ensures that the function's parameters will be emitted on a single logical "
"line, overriding :confval:`cpp_maximum_signature_line_length` and :confval:"
"`maximum_signature_line_length`."
msgstr ""

#: ../../../usage/domains/cpp.rst:102
msgid "Describe a variable or member variable, e.g.,::"
msgstr ""

#: ../../../usage/domains/cpp.rst:104
msgid ""
".. cpp:member:: std::string MyClass::myMember\n"
"\n"
".. cpp:var:: std::string MyClass::myOtherMember[N][M]\n"
"\n"
".. cpp:member:: int a = 42"
msgstr ""

#: ../../../usage/domains/cpp.rst:110
msgid "Variable templates can also be described::"
msgstr ""

#: ../../../usage/domains/cpp.rst:112
msgid ""
".. cpp:member:: template<class T> \\\n"
"                constexpr T pi = T(3.1415926535897932385)"
msgstr ""

#: ../../../usage/domains/cpp.rst:119
msgid ""
"Describe a type as in a typedef declaration, a type alias declaration, or "
"simply the name of a type with unspecified type, e.g.,::"
msgstr ""

#: ../../../usage/domains/cpp.rst:122
msgid ""
".. cpp:type:: std::vector<int> MyList\n"
"\n"
"   A typedef-like declaration of a type.\n"
"\n"
".. cpp:type:: MyContainer::const_iterator\n"
"\n"
"   Declaration of a type alias with unspecified type.\n"
"\n"
".. cpp:type:: MyType = std::unordered_map<int, std::string>\n"
"\n"
"   Declaration of a type alias."
msgstr ""

#: ../../../usage/domains/cpp.rst:134
msgid "A type alias can also be templated::"
msgstr ""

#: ../../../usage/domains/cpp.rst:136
msgid ""
".. cpp:type:: template<typename T> \\\n"
"              MyContainer = std::vector<T>"
msgstr ""

#: ../../../usage/domains/cpp.rst:139
msgid "The example are rendered as follows."
msgstr ""

#: ../../../usage/domains/cpp.rst:145
msgid "A typedef-like declaration of a type."
msgstr ""

#: ../../../usage/domains/cpp.rst:151
msgid "Declaration of a type alias with unspecified type."
msgstr ""

#: ../../../usage/domains/cpp.rst:157
msgid "Declaration of a type alias."
msgstr ""

#: ../../../usage/domains/cpp.rst:168
msgid ""
"Describe a (scoped) enum, possibly with the underlying type specified.  Any "
"enumerators declared inside an unscoped enum will be declared both in the "
"enum scope and in the parent scope.  Examples::"
msgstr ""

#: ../../../usage/domains/cpp.rst:172
msgid ""
".. cpp:enum:: MyEnum\n"
"\n"
"   An unscoped enum.\n"
"\n"
".. cpp:enum:: MySpecificEnum : long\n"
"\n"
"   An unscoped enum with specified underlying type.\n"
"\n"
".. cpp:enum-class:: MyScopedEnum\n"
"\n"
"   A scoped enum.\n"
"\n"
".. cpp:enum-struct:: protected MyScopedVisibilityEnum : std::"
"underlying_type<MySpecificEnum>::type\n"
"\n"
"   A scoped enum with non-default visibility, and with a specified\n"
"   underlying type."
msgstr ""

#: ../../../usage/domains/cpp.rst:192
msgid "Describe an enumerator, optionally with its value defined, e.g.,::"
msgstr ""

#: ../../../usage/domains/cpp.rst:194
msgid ""
".. cpp:enumerator:: MyEnum::myEnumerator\n"
"\n"
".. cpp:enumerator:: MyEnum::myOtherEnumerator = 42"
msgstr ""

#: ../../../usage/domains/cpp.rst:200
msgid "Describe a union."
msgstr ""

#: ../../../usage/domains/cpp.rst:206 ../../../usage/domains/cpp.rst:369
msgid ""
"The support for concepts is experimental. It is based on the current draft "
"standard and the Concepts Technical Specification. The features may change "
"as they evolve."
msgstr ""

#: ../../../usage/domains/cpp.rst:210
msgid ""
"Describe a concept. It must have exactly 1 template parameter list. The name "
"may be a nested name. Example::"
msgstr ""

#: ../../../usage/domains/cpp.rst:213
msgid ""
".. cpp:concept:: template<typename It> std::Iterator\n"
"\n"
"   Proxy to an element of a notional sequence that can be compared,\n"
"   indirected, or incremented.\n"
"\n"
"   **Notation**\n"
"\n"
"   .. cpp:var:: It r\n"
"\n"
"      An lvalue.\n"
"\n"
"   **Valid Expressions**\n"
"\n"
"   - :cpp:expr:`*r`, when :cpp:expr:`r` is dereferenceable.\n"
"   - :cpp:expr:`++r`, with return type :cpp:expr:`It&`, when\n"
"     :cpp:expr:`r` is incrementable."
msgstr ""

#: ../../../usage/domains/cpp.rst:230
msgid "This will render as follows:"
msgstr ""

#: ../../../usage/domains/cpp.rst:236
msgid ""
"Proxy to an element of a notional sequence that can be compared, indirected, "
"or incremented."
msgstr ""

#: ../../../usage/domains/cpp.rst:239
msgid "**Notation**"
msgstr ""

#: ../../../usage/domains/cpp.rst:243
msgid "An lvalue."
msgstr ""

#: ../../../usage/domains/cpp.rst:245
msgid "**Valid Expressions**"
msgstr ""

#: ../../../usage/domains/cpp.rst:247
msgid ":cpp:expr:`*r`, when :cpp:expr:`r` is dereferenceable."
msgstr ""

#: ../../../usage/domains/cpp.rst:248
msgid ""
":cpp:expr:`++r`, with return type :cpp:expr:`It&`, when :cpp:expr:`r` is "
"incrementable."
msgstr ""

#: ../../../usage/domains/cpp.rst:255 ../../../usage/domains/cpp.rst:349
msgid "Options"
msgstr ""

#: ../../../usage/domains/cpp.rst:257
msgid "Some directives support options:"
msgstr ""

#: ../../../usage/domains/cpp.rst:259
msgid ""
"``:no-index-entry:`` and ``:no-contents-entry:``, see :ref:`basic-domain-"
"markup`."
msgstr ""

#: ../../../usage/domains/cpp.rst:260
msgid ""
"``:tparam-line-spec:``, for templated declarations. If specified, each "
"template parameter will be rendered on a separate line."
msgstr ""

#: ../../../usage/domains/cpp.rst:266
msgid "Anonymous Entities"
msgstr ""

#: ../../../usage/domains/cpp.rst:268
msgid ""
"C++ supports anonymous namespaces, classes, enums, and unions. For the sake "
"of documentation they must be given some name that starts with ``@``, e.g., "
"``@42`` or ``@data``. These names can also be used in cross-references and "
"(type) expressions, though nested symbols will be found even when omitted. "
"The ``@...`` name will always be rendered as **[anonymous]** (possibly as a "
"link)."
msgstr ""

#: ../../../usage/domains/cpp.rst:276
msgid "Example::"
msgstr ""

#: ../../../usage/domains/cpp.rst:278
msgid ""
".. cpp:class:: Data\n"
"\n"
"   .. cpp:union:: @data\n"
"\n"
"      .. cpp:var:: int a\n"
"\n"
"      .. cpp:var:: double b\n"
"\n"
"Explicit ref: :cpp:var:`Data::@data::a`. Short-hand ref: :cpp:var:`Data::a`."
msgstr ""

#: ../../../usage/domains/cpp.rst:288
msgid "This will be rendered as:"
msgstr ""

#: ../../../usage/domains/cpp.rst:306
msgid ""
"Explicit ref: :cpp:var:`Data::@data::a`. Short-hand ref: :cpp:var:`Data::a`."
msgstr ""

#: ../../../usage/domains/cpp.rst:312
msgid "Aliasing Declarations"
msgstr ""

#: ../../../usage/domains/cpp.rst:314
msgid ""
"Sometimes it may be helpful list declarations elsewhere than their main "
"documentation, e.g., when creating a synopsis of a class interface. The "
"following directive can be used for this purpose."
msgstr ""

#: ../../../usage/domains/cpp.rst:320
msgid ""
"Insert one or more alias declarations. Each entity can be specified as they "
"can in the :rst:role:`cpp:any` role. If the name of a function is given (as "
"opposed to the complete signature), then all overloads of the function will "
"be listed."
msgstr ""

#: ../../../usage/domains/cpp.rst:325
msgid "For example::"
msgstr ""

#: ../../../usage/domains/cpp.rst:327
msgid ""
".. cpp:alias:: Data::a\n"
"               overload_example::C::f"
msgstr ""

#: ../../../usage/domains/cpp.rst:330 ../../../usage/domains/cpp.rst:340
msgid "becomes"
msgstr ""

#: ../../../usage/domains/cpp.rst:335
msgid "whereas::"
msgstr ""

#: ../../../usage/domains/cpp.rst:337
msgid ""
".. cpp:alias:: void overload_example::C::f(double d) const\n"
"               void overload_example::C::f(double d)"
msgstr ""

#: ../../../usage/domains/cpp.rst:352
msgid ""
"Insert nested declarations as well, up to the total depth given. Use 0 for "
"infinite depth and 1 for just the mentioned declaration. Defaults to 1."
msgstr ""

#: ../../../usage/domains/cpp.rst:360
msgid ""
"Skip the mentioned declarations and only render nested declarations. "
"Requires ``maxdepth`` either 0 or at least 2."
msgstr ""

#: ../../../usage/domains/cpp.rst:367
msgid "Constrained Templates"
msgstr ""

#: ../../../usage/domains/cpp.rst:373
msgid "Sphinx does not currently support ``requires`` clauses."
msgstr ""

#: ../../../usage/domains/cpp.rst:376
msgid "Placeholders"
msgstr ""

#: ../../../usage/domains/cpp.rst:378
msgid ""
"Declarations may use the name of a concept to introduce constrained template "
"parameters, or the keyword ``auto`` to introduce unconstrained template "
"parameters::"
msgstr ""

#: ../../../usage/domains/cpp.rst:382
msgid ""
".. cpp:function:: void f(auto &&arg)\n"
"\n"
"   A function template with a single unconstrained template parameter.\n"
"\n"
".. cpp:function:: void f(std::Iterator it)\n"
"\n"
"   A function template with a single template parameter, constrained by the\n"
"   Iterator concept."
msgstr ""

#: ../../../usage/domains/cpp.rst:392
msgid "Template Introductions"
msgstr ""

#: ../../../usage/domains/cpp.rst:394
msgid ""
"Simple constrained function or class templates can be declared with a "
"`template introduction` instead of a template parameter list::"
msgstr ""

#: ../../../usage/domains/cpp.rst:397
msgid ""
".. cpp:function:: std::Iterator{It} void advance(It &it)\n"
"\n"
"    A function template with a template parameter constrained to be an\n"
"    Iterator.\n"
"\n"
".. cpp:class:: std::LessThanComparable{T} MySortedContainer\n"
"\n"
"    A class template with a template parameter constrained to be\n"
"    LessThanComparable."
msgstr ""

#: ../../../usage/domains/cpp.rst:407
msgid "They are rendered as follows."
msgstr ""

#: ../../../usage/domains/cpp.rst:413
msgid ""
"A function template with a template parameter constrained to be an Iterator."
msgstr ""

#: ../../../usage/domains/cpp.rst:419
msgid ""
"A class template with a template parameter constrained to be "
"LessThanComparable."
msgstr ""

#: ../../../usage/domains/cpp.rst:422
msgid ""
"Note however that no checking is performed with respect to parameter "
"compatibility. E.g., ``Iterator{A, B, C}`` will be accepted as an "
"introduction even though it would not be valid C++."
msgstr ""

#: ../../../usage/domains/cpp.rst:427
msgid "Inline Expressions and Types"
msgstr ""

#: ../../../usage/domains/cpp.rst:432
msgid ""
"Insert a C++ expression or type either as inline code (``cpp:expr``) or "
"inline text (``cpp:texpr``). For example::"
msgstr ""

#: ../../../usage/domains/cpp.rst:435
msgid ""
".. cpp:var:: int a = 42\n"
"\n"
".. cpp:function:: int f(int i)\n"
"\n"
"An expression: :cpp:expr:`a * f(a)` (or as text: :cpp:texpr:`a * f(a)`).\n"
"\n"
"A type: :cpp:expr:`const MySortedContainer<int>&`\n"
"(or as text :cpp:texpr:`const MySortedContainer<int>&`)."
msgstr ""

#: ../../../usage/domains/cpp.rst:444
msgid "will be rendered as follows:"
msgstr ""

#: ../../../usage/domains/cpp.rst:454
msgid ""
"An expression: :cpp:expr:`a * f(a)` (or as text: :cpp:texpr:`a * f(a)`)."
msgstr ""

#: ../../../usage/domains/cpp.rst:456
msgid ""
"A type: :cpp:expr:`const MySortedContainer<int>&` (or as text :cpp:texpr:"
"`const MySortedContainer<int>&`)."
msgstr ""

#: ../../../usage/domains/cpp.rst:459
msgid "The :rst:role:`cpp:expr` role."
msgstr ""

#: ../../../usage/domains/cpp.rst:462
msgid "The :rst:role:`cpp:texpr` role."
msgstr ""

#: ../../../usage/domains/cpp.rst:466
msgid "Namespacing"
msgstr ""

#: ../../../usage/domains/cpp.rst:468
msgid ""
"Declarations in the C++ domain are as default placed in global scope.  The "
"current scope can be changed using three namespace directives.  They manage "
"a stack declarations where ``cpp:namespace`` resets the stack and changes a "
"given scope."
msgstr ""

#: ../../../usage/domains/cpp.rst:473
msgid ""
"The ``cpp:namespace-push`` directive changes the scope to a given inner "
"scope of the current one."
msgstr ""

#: ../../../usage/domains/cpp.rst:476
msgid ""
"The ``cpp:namespace-pop`` directive undoes the most recent ``cpp:namespace-"
"push`` directive."
msgstr ""

#: ../../../usage/domains/cpp.rst:481
msgid ""
"Changes the current scope for the subsequent objects to the given scope, and "
"resets the namespace directive stack.  Note that the namespace does not need "
"to correspond to C++ namespaces, but can end in names of classes, e.g.,::"
msgstr ""

#: ../../../usage/domains/cpp.rst:485
msgid ".. cpp:namespace:: Namespace1::Namespace2::SomeClass::AnInnerClass"
msgstr ""

#: ../../../usage/domains/cpp.rst:487
msgid ""
"All subsequent objects will be defined as if their name were declared with "
"the scope prepended. The subsequent cross-references will be searched for "
"starting in the current scope."
msgstr ""

#: ../../../usage/domains/cpp.rst:491
msgid ""
"Using ``NULL``, ``0``, or ``nullptr`` as the scope will change to global "
"scope."
msgstr ""

#: ../../../usage/domains/cpp.rst:494
msgid "A namespace declaration can also be templated, e.g.,::"
msgstr ""

#: ../../../usage/domains/cpp.rst:496
msgid ""
".. cpp:class:: template<typename T> \\\n"
"               std::vector\n"
"\n"
".. cpp:namespace:: template<typename T> std::vector\n"
"\n"
".. cpp:function:: std::size_t size() const"
msgstr ""

#: ../../../usage/domains/cpp.rst:503
msgid ""
"declares ``size`` as a member function of the class template ``std::"
"vector``.  Equivalently this could have been declared using::"
msgstr ""

#: ../../../usage/domains/cpp.rst:506
msgid ""
".. cpp:class:: template<typename T> \\\n"
"               std::vector\n"
"\n"
"   .. cpp:function:: std::size_t size() const"
msgstr ""

#: ../../../usage/domains/cpp.rst:511
msgid "or::"
msgstr ""

#: ../../../usage/domains/cpp.rst:513
msgid ""
".. cpp:class:: template<typename T> \\\n"
"               std::vector"
msgstr ""

#: ../../../usage/domains/cpp.rst:518
msgid "Change the scope relatively to the current scope. For example, after::"
msgstr ""

#: ../../../usage/domains/cpp.rst:520
msgid ""
".. cpp:namespace:: A::B\n"
"\n"
".. cpp:namespace-push:: C::D"
msgstr ""

#: ../../../usage/domains/cpp.rst:524
msgid "the current scope will be ``A::B::C::D``."
msgstr ""

#: ../../../usage/domains/cpp.rst:530
msgid ""
"Undo the previous ``cpp:namespace-push`` directive (*not* just pop a scope). "
"For example, after::"
msgstr ""

#: ../../../usage/domains/cpp.rst:533
msgid ""
".. cpp:namespace:: A::B\n"
"\n"
".. cpp:namespace-push:: C::D\n"
"\n"
".. cpp:namespace-pop::"
msgstr ""

#: ../../../usage/domains/cpp.rst:539
msgid "the current scope will be ``A::B`` (*not* ``A::B::C``)."
msgstr ""

#: ../../../usage/domains/cpp.rst:541
msgid ""
"If no previous ``cpp:namespace-push`` directive has been used, but only a "
"``cpp:namespace`` directive, then the current scope will be reset to global "
"scope.  That is, ``.. cpp:namespace:: A::B`` is equivalent to::"
msgstr ""

#: ../../../usage/domains/cpp.rst:545
msgid ""
".. cpp:namespace:: nullptr\n"
"\n"
".. cpp:namespace-push:: A::B"
msgstr ""

#: ../../../usage/domains/cpp.rst:552
msgid "Info field lists"
msgstr ""

#: ../../../usage/domains/cpp.rst:554
msgid ""
"All the C++ directives for declaring entities support the following info "
"fields (see also :ref:`info-field-lists`):"
msgstr ""

#: ../../../usage/domains/cpp.rst:557
msgid "``tparam``: Description of a template parameter."
msgstr ""

#: ../../../usage/domains/cpp.rst:559
msgid ""
"The :rst:dir:`cpp:function` directive additionally supports the following "
"fields:"
msgstr ""

#: ../../../usage/domains/cpp.rst:562
msgid ""
"``param``, ``parameter``, ``arg``, ``argument``: Description of a parameter."
msgstr ""

#: ../../../usage/domains/cpp.rst:563
msgid "``returns``, ``return``: Description of a return value."
msgstr ""

#: ../../../usage/domains/cpp.rst:564
msgid ""
"``retval``, ``retvals``: An alternative to ``returns`` for describing the "
"result of the function."
msgstr ""

#: ../../../usage/domains/cpp.rst:566
msgid ""
"``throws``, ``throw``, ``exception``: Description of a possibly thrown "
"exception."
msgstr ""

#: ../../../usage/domains/cpp.rst:568
msgid "The ``retval`` field type."
msgstr ""

#: ../../../usage/domains/cpp.rst:574
msgid "Cross-referencing"
msgstr ""

#: ../../../usage/domains/cpp.rst:576
msgid "These roles link to the given declaration types:"
msgstr ""

#: ../../../usage/domains/cpp.rst:589
msgid ""
"Reference a C++ declaration by name (see below for details).  The name must "
"be properly qualified relative to the position of the link."
msgstr ""

#: ../../../usage/domains/cpp.rst:592
msgid ""
"The :rst:role:`cpp:struct` role as alias for the :rst:role:`cpp:class` role."
msgstr ""

#: ../../../usage/domains/cpp.rst:596
msgid "Note on References with Templates Parameters/Arguments"
msgstr ""

#: ../../../usage/domains/cpp.rst:598
msgid ""
"These roles follow the Sphinx :ref:`xref-syntax` rules. This means care must "
"be taken when referencing a (partial) template specialization, e.g. if the "
"link looks like this: ``:cpp:class:`MyClass<int>```. This is interpreted as "
"a link to ``int`` with a title of ``MyClass``. In this case, escape the "
"opening angle bracket with a backslash, like this: ``:cpp:class:"
"`MyClass\\<int>```."
msgstr ""

#: ../../../usage/domains/cpp.rst:605
msgid ""
"When a custom title is not needed it may be useful to use the roles for "
"inline expressions, :rst:role:`cpp:expr` and :rst:role:`cpp:texpr`, where "
"angle brackets do not need escaping."
msgstr ""

#: ../../../usage/domains/cpp.rst:610
msgid "Declarations without template parameters and template arguments"
msgstr ""

#: ../../../usage/domains/cpp.rst:612
msgid ""
"For linking to non-templated declarations the name must be a nested name, e."
"g., ``f`` or ``MyClass::f``."
msgstr ""

#: ../../../usage/domains/cpp.rst:617
msgid "Overloaded (member) functions"
msgstr ""

#: ../../../usage/domains/cpp.rst:619
msgid ""
"When a (member) function is referenced using just its name, the reference "
"will point to an arbitrary matching overload. The :rst:role:`cpp:any` and :"
"rst:role:`cpp:func` roles use an alternative format, which simply is a "
"complete function declaration. This will resolve to the exact matching "
"overload. As example, consider the following class declaration:"
msgstr ""

#: ../../../usage/domains/cpp.rst:644
msgid "References using the :rst:role:`cpp:func` role:"
msgstr ""

#: ../../../usage/domains/cpp.rst:646
msgid "Arbitrary overload: ``C::f``, :cpp:func:`C::f`"
msgstr ""

#: ../../../usage/domains/cpp.rst:647
msgid "Also arbitrary overload: ``C::f()``, :cpp:func:`C::f()`"
msgstr ""

#: ../../../usage/domains/cpp.rst:648
msgid "Specific overload: ``void C::f()``, :cpp:func:`void C::f()`"
msgstr ""

#: ../../../usage/domains/cpp.rst:649
msgid "Specific overload: ``void C::f(int)``, :cpp:func:`void C::f(int)`"
msgstr ""

#: ../../../usage/domains/cpp.rst:650
msgid "Specific overload: ``void C::f(double)``, :cpp:func:`void C::f(double)`"
msgstr ""

#: ../../../usage/domains/cpp.rst:651
msgid ""
"Specific overload: ``void C::f(double) const``, :cpp:func:`void C::f(double) "
"const`"
msgstr ""

#: ../../../usage/domains/cpp.rst:654
msgid ""
"Note that the :confval:`add_function_parentheses` configuration variable "
"does not influence specific overload references."
msgstr ""

#: ../../../usage/domains/cpp.rst:661
msgid "Templated declarations"
msgstr ""

#: ../../../usage/domains/cpp.rst:663 ../../../usage/domains/cpp.rst:706
msgid "Assume the following declarations."
msgstr ""

#: ../../../usage/domains/cpp.rst:679
msgid ""
"In general the reference must include the template parameter declarations, "
"and template arguments for the prefix of qualified names. For example:"
msgstr ""

#: ../../../usage/domains/cpp.rst:682
msgid ""
"``template\\<typename TOuter> Wrapper::Outer`` (:cpp:class:"
"`template\\<typename TOuter> Wrapper::Outer`)"
msgstr ""

#: ../../../usage/domains/cpp.rst:684
msgid ""
"``template\\<typename TOuter> template\\<typename TInner> Wrapper::"
"Outer<TOuter>::Inner`` (:cpp:class:`template\\<typename TOuter> "
"template\\<typename TInner> Wrapper::Outer<TOuter>::Inner`)"
msgstr ""

#: ../../../usage/domains/cpp.rst:687
msgid ""
"Currently the lookup only succeed if the template parameter identifiers are "
"equal strings.  That is, ``template\\<typename UOuter> Wrapper::Outer`` will "
"not work."
msgstr ""

#: ../../../usage/domains/cpp.rst:691
msgid ""
"As a shorthand notation, if a template parameter list is omitted, then the "
"lookup will assume either a primary template or a non-template, but not a "
"partial template specialisation. This means the following references work as "
"well:"
msgstr ""

#: ../../../usage/domains/cpp.rst:696
msgid "``Wrapper::Outer`` (:cpp:class:`Wrapper::Outer`)"
msgstr ""

#: ../../../usage/domains/cpp.rst:698
msgid "``Wrapper::Outer::Inner`` (:cpp:class:`Wrapper::Outer::Inner`)"
msgstr ""

#: ../../../usage/domains/cpp.rst:700
msgid ""
"``template\\<typename TInner> Wrapper::Outer::Inner`` (:cpp:class:"
"`template\\<typename TInner> Wrapper::Outer::Inner`)"
msgstr ""

#: ../../../usage/domains/cpp.rst:704
msgid "(Full) Template Specialisations"
msgstr ""

#: ../../../usage/domains/cpp.rst:733
msgid ""
"In general the reference must include a template parameter list for each "
"template argument list.  The full specialisation above can therefore be "
"referenced with ``template\\<> Outer\\<int>`` (:cpp:class:`template\\<> "
"Outer\\<int>`) and ``template\\<> template\\<> Outer\\<int>::Inner\\<bool>`` "
"(:cpp:class:`template\\<> template\\<> Outer\\<int>::Inner\\<bool>`).  As a "
"shorthand the empty template parameter list can be omitted, e.g., "
"``Outer\\<int>`` (:cpp:class:`Outer\\<int>`) and ``Outer\\<int>::"
"Inner\\<bool>`` (:cpp:class:`Outer\\<int>::Inner\\<bool>`)."
msgstr ""

#: ../../../usage/domains/cpp.rst:743
msgid "Partial Template Specialisations"
msgstr ""

#: ../../../usage/domains/cpp.rst:745
msgid "Assume the following declaration."
msgstr ""

#: ../../../usage/domains/cpp.rst:752
msgid ""
"References to partial specialisations must always include the template "
"parameter lists, e.g., ``template\\<typename T> Outer\\<T*>`` (:cpp:class:"
"`template\\<typename T> Outer\\<T*>`).  Currently the lookup only succeed if "
"the template parameter identifiers are equal strings."
msgstr ""

#: ../../../usage/domains/cpp.rst:758
msgid "Configuration Variables"
msgstr ""

#: ../../../usage/domains/cpp.rst:760
msgid "See :ref:`cpp-config`."
msgstr ""
