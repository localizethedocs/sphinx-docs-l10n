# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, the Sphinx developers
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-03 20:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../usage/restructuredtext/domains.rst:5
msgid "Domains"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:9
msgid ""
"Originally, Sphinx was conceived for a single project, the documentation of "
"the Python language.  Shortly afterwards, it was made available for everyone "
"as a documentation tool, but the documentation of Python modules remained "
"deeply built in -- the most fundamental directives, like ``function``, were "
"designed for Python objects.  Since Sphinx has become somewhat popular, "
"interest developed in using it for many different purposes: C/C++ projects, "
"JavaScript, or even reStructuredText markup (like in this documentation)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:17
msgid ""
"While this was always possible, it is now much easier to easily support "
"documentation of projects using different programming languages or even ones "
"not supported by the main Sphinx distribution, by providing a **domain** for "
"every such purpose."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:22
msgid ""
"A domain is a collection of markup (reStructuredText :term:`directive`\\ s "
"and :term:`role`\\ s) to describe and link to :term:`object`\\ s belonging "
"together, e.g. elements of a programming language.  Directive and role names "
"in a domain have names like ``domain:name``, e.g. ``py:function``.  Domains "
"can also provide custom indices (like the Python Module Index)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:28
msgid ""
"Having domains means that there are no naming problems when one set of "
"documentation wants to refer to e.g. C++ and Python classes.  It also means "
"that extensions that support the documentation of whole new languages are "
"much easier to write."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:33
msgid ""
"This section describes what the domains that are included with Sphinx "
"provide. The domain API is documented as well, in the section :ref:`domain-"
"api`."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:40
msgid "Basic Markup"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:42
msgid ""
"Most domains provide a number of :dfn:`object description directives`, used "
"to describe specific objects provided by modules.  Each directive requires "
"one or more signatures to provide basic information about what is being "
"described, and the content should be the description."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:47
msgid ""
"A domain will typically keep an internal index of all entities to aid cross-"
"referencing. Typically it will also add entries in the shown general index. "
"If you want to suppress the addition of an entry in the shown index, you can "
"give the directive option flag ``:noindexentry:``. If you want to exclude "
"the object description from the table of contents, you can give the "
"directive option flag ``:nocontentsentry:``. If you want to typeset an "
"object description, without even making it available for cross-referencing, "
"you can give the directive option flag ``:noindex:`` (which implies ``:"
"noindexentry:``). Though, note that not every directive in every domain may "
"support these options."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:60
msgid ""
"The directive option ``noindexentry`` in the Python, C, C++, and Javascript "
"domains."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:64
msgid ""
"The directive option ``:nocontentsentry:`` in the Python, C, C++, "
"Javascript, and reStructuredText domains."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:68
msgid "An example using a Python domain directive::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:70
msgid ""
".. py:function:: spam(eggs)\n"
"                 ham(eggs)\n"
"\n"
"   Spam or ham the foo."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:75
msgid ""
"This describes the two Python functions ``spam`` and ``ham``.  (Note that "
"when signatures become too long, you can break them if you add a backslash "
"to lines that are continued in the next line.  Example::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:79
msgid ""
".. py:function:: filterwarnings(action, message='', category=Warning, \\\n"
"                                module='', lineno=0, append=False)\n"
"   :noindex:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:83
msgid "(This example also shows how to use the ``:noindex:`` flag.)"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:85
msgid ""
"The domains also provide roles that link back to these object descriptions. "
"For example, to link to one of the functions described in the example above, "
"you could say ::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:89
msgid "The function :py:func:`spam` does a similar thing."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:91
msgid ""
"As you can see, both directive and role names contain the domain name and "
"the directive name."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:95
msgid "Default Domain"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:96
msgid ""
"For documentation describing objects from solely one domain, authors will "
"not have to state again its name at each directive, role, etc... after "
"having specified a default. This can be done either via the config value :"
"confval:`primary_domain` or via this directive:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:103
msgid ""
"Select a new default domain.  While the :confval:`primary_domain` selects a "
"global default, this only has an effect within the same file."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:106
msgid ""
"If no other default is selected, the Python domain (named ``py``) is the "
"default one, mostly for compatibility with documentation written for older "
"versions of Sphinx."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:110
msgid ""
"Directives and roles that belong to the default domain can be mentioned "
"without giving the domain name, i.e. ::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:113
msgid ""
".. function:: pyfunc()\n"
"\n"
"   Describes a Python function.\n"
"\n"
"Reference to :func:`pyfunc`."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:120
msgid "Cross-referencing syntax"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:122
msgid ""
"For cross-reference roles provided by domains, the same facilities exist as "
"for general cross-references.  See :ref:`xref-syntax`."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:125
msgid "In short:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:127
msgid ""
"You may supply an explicit title and reference target: ``:role:`title "
"<target>``` will refer to *target*, but the link text will be *title*."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:130
msgid ""
"If you prefix the content with ``!``, no reference/hyperlink will be created."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:132
msgid ""
"If you prefix the content with ``~``, the link text will only be the last "
"component of the target.  For example, ``:py:meth:`~Queue.Queue.get``` will "
"refer to ``Queue.Queue.get`` but only display ``get`` as the link text."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:139
msgid "The Python Domain"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:141
msgid ""
"The Python domain (name **py**) provides the following directives for module "
"declarations:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:146
msgid ""
"This directive marks the beginning of the description of a module (or "
"package submodule, in which case the name should be fully qualified, "
"including the package name).  A description of the module such as the "
"docstring can be placed in the body of the directive."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:151
msgid "This directive will also cause an entry in the global module index."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:155
#: ../../../usage/restructuredtext/domains.rst:1887
msgid "Module directives support body content."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:158
#: ../../../usage/restructuredtext/domains.rst:212
#: ../../../usage/restructuredtext/domains.rst:241
#: ../../../usage/restructuredtext/domains.rst:272
#: ../../../usage/restructuredtext/domains.rst:310
#: ../../../usage/restructuredtext/domains.rst:339
#: ../../../usage/restructuredtext/domains.rst:371
#: ../../../usage/restructuredtext/domains.rst:401
#: ../../../usage/restructuredtext/domains.rst:2022
msgid "options"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:162
msgid ""
"Indicate platforms which the module is available (if it is available on all "
"platforms, the option should be omitted).  The keys are short identifiers; "
"examples that are in use include \"IRIX\", \"Mac\", \"Windows\" and "
"\"Unix\".  It is important to use a key which has already been used when "
"applicable."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:171
msgid ""
"Consist of one sentence describing the module's purpose -- it is currently "
"only used in the Global Module Index."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:177
msgid ""
"Mark a module as deprecated; it will be designated as such in various "
"locations then."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:184
msgid ""
"This directive tells Sphinx that the classes, functions etc. documented from "
"here are in the given module (like :rst:dir:`py:module`), but it will not "
"create index entries, an entry in the Global Module Index, or a link target "
"for :rst:role:`py:mod`.  This is helpful in situations where documentation "
"for things in a module is spread over multiple files or sections -- one "
"location has the :rst:dir:`py:module` directive, the others only :rst:dir:"
"`py:currentmodule`."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:192
msgid "The following directives are provided for module and class contents:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:196
msgid ""
"Describes a module-level function.  The signature should include the "
"parameters as given in the Python function definition, see :ref:"
"`signatures`. For example::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:200
msgid ".. py:function:: Timer.repeat(repeat=3, number=1000000)"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:202
msgid "For methods you should use :rst:dir:`py:method`."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:204
msgid ""
"The description normally includes information about the parameters required "
"and how they are used (especially whether mutable objects passed as "
"parameters are modified), side effects, and possible exceptions."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:208
msgid ""
"This information can (in any ``py`` directive) optionally be given in a "
"structured form, see :ref:`info-field-lists`."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:216
msgid "Indicate the function is an async function."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:223
#: ../../../usage/restructuredtext/domains.rst:255
#: ../../../usage/restructuredtext/domains.rst:314
#: ../../../usage/restructuredtext/domains.rst:353
#: ../../../usage/restructuredtext/domains.rst:419
msgid ""
"Describe the location where the object is defined if the object is imported "
"from other modules"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:236
msgid ""
"Describes global data in a module, including both variables and values used "
"as \"defined constants.\"  Class and object attributes are not documented "
"using this environment."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:268
msgid ""
"Describes an exception class.  The signature can, but need not include "
"parentheses with constructor arguments."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:276
#: ../../../usage/restructuredtext/domains.rst:322
msgid "Indicate the class is a final class."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:289
msgid ""
"Describes a class.  The signature can optionally include parentheses with "
"parameters which will be shown as the constructor arguments.  See also :ref:"
"`signatures`."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:293
msgid ""
"Methods and attributes belonging to the class should be placed in this "
"directive's body.  If they are placed outside, the supplied name should "
"contain the class name so that cross-references still work.  Example::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:297
msgid ""
".. py:class:: Foo\n"
"\n"
"   .. py:method:: quux()\n"
"\n"
"-- or --\n"
"\n"
".. py:class:: Bar\n"
"\n"
".. py:method:: Bar.quux()"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:307
msgid "The first way is the preferred one."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:334
msgid ""
"Describes an object data attribute.  The description should include "
"information about the type of the data to be expected and whether it may be "
"changed directly."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:366
msgid "Describes an object property."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:375
msgid "Indicate the property is abstract."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:380
msgid "Indicate the property is a classmethod."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:395
msgid ""
"Describes an object method.  The parameters should not include the ``self`` "
"parameter.  The description should include similar information to that "
"described for ``function``.  See also :ref:`signatures` and :ref:`info-field-"
"lists`."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:405
msgid "Indicate the method is an abstract method."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:412
msgid "Indicate the method is an async method."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:427
msgid "Indicate the method is a class method."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:434
msgid "Indicate the class is a final method."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:447
msgid "Indicate the method is a property."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:453
msgid "Use :rst:dir:`py:property` instead."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:458
msgid "Indicate the method is a static method."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:465
msgid ""
"Like :rst:dir:`py:method`, but indicates that the method is a static method."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:471
msgid ""
"Like :rst:dir:`py:method`, but indicates that the method is a class method."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:478
msgid ""
"Describes a decorator function.  The signature should represent the usage as "
"a decorator.  For example, given the functions"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:481
msgid ""
"def removename(func):\n"
"    func.__name__ = ''\n"
"    return func\n"
"\n"
"def setnewname(name):\n"
"    def decorator(func):\n"
"        func.__name__ = name\n"
"        return func\n"
"    return decorator"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:493
msgid "the descriptions should look like this::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:495
msgid ""
".. py:decorator:: removename\n"
"\n"
"   Remove name of the decorated function.\n"
"\n"
".. py:decorator:: setnewname(name)\n"
"\n"
"   Set name of the decorated function to *name*."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:503
msgid "(as opposed to ``.. py:decorator:: removename(func)``.)"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:505
msgid ""
"There is no ``py:deco`` role to link to a decorator that is marked up with "
"this directive; rather, use the :rst:role:`py:func` role."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:511
msgid "Same as :rst:dir:`py:decorator`, but for decorators that are methods."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:513
msgid "Refer to a decorator method using the :rst:role:`py:meth` role."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:518
msgid "Python Signatures"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:520
msgid ""
"Signatures of functions, methods and class constructors can be given like "
"they would be written in Python."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:523
msgid ""
"Default values for optional arguments can be given (but if they contain "
"commas, they will confuse the signature parser).  Python 3-style argument "
"annotations can also be given as well as return type annotations::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:527
msgid ""
".. py:function:: compile(source : string, filename, symbol='file') -> ast "
"object"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:529
msgid ""
"For functions with optional parameters that don't have default values "
"(typically functions implemented in C extension modules without keyword "
"argument support), you can use brackets to specify the optional parts:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:536
msgid "It is customary to put the opening bracket before the comma."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:541
#: ../../../usage/restructuredtext/domains.rst:1591
msgid "Info field lists"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:546
msgid "meta fields are added."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:548
msgid ""
"Inside Python object description directives, reST field lists with these "
"fields are recognized and formatted nicely:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:551
msgid ""
"``param``, ``parameter``, ``arg``, ``argument``, ``key``, ``keyword``: "
"Description of a parameter."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:553
msgid "``type``: Type of a parameter.  Creates a link if possible."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:554
msgid ""
"``raises``, ``raise``, ``except``, ``exception``: That (and when) a specific "
"exception is raised."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:556
msgid "``var``, ``ivar``, ``cvar``: Description of a variable."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:557
msgid "``vartype``: Type of a variable.  Creates a link if possible."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:558
#: ../../../usage/restructuredtext/domains.rst:745
msgid "``returns``, ``return``: Description of the return value."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:559
msgid "``rtype``: Return type.  Creates a link if possible."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:560
msgid ""
"``meta``: Add metadata to description of the python object.  The metadata "
"will not be shown on output document.  For example, ``:meta private:`` "
"indicates the python object is private member.  It is used in :py:mod:"
"`sphinx.ext.autodoc` for filtering members."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:567
msgid ""
"In current release, all ``var``, ``ivar`` and ``cvar`` are represented as "
"\"Variable\".  There is no difference at all."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:570
msgid ""
"The field names must consist of one of these keywords and an argument "
"(except for ``returns`` and ``rtype``, which do not need an argument).  This "
"is best explained by an example::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:574
msgid ""
".. py:function:: send_message(sender, recipient, message_body, "
"[priority=1])\n"
"\n"
"   Send a message to a recipient\n"
"\n"
"   :param str sender: The person sending the message\n"
"   :param str recipient: The recipient of the message\n"
"   :param str message_body: The body of the message\n"
"   :param priority: The priority of the message, can be a number 1-5\n"
"   :type priority: integer or None\n"
"   :return: the message id\n"
"   :rtype: int\n"
"   :raises ValueError: if the message_body exceeds 160 characters\n"
"   :raises TypeError: if the message_body is not a basestring"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:588
msgid "This will render like this:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:593
msgid "Send a message to a recipient"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:0
msgid "Parameters"
msgstr "參數"

#: ../../../usage/restructuredtext/domains.rst:595
msgid "The person sending the message"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:596
msgid "The recipient of the message"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:597
msgid "The body of the message"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:598
msgid "The priority of the message, can be a number 1-5"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:0
msgid "Returns"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:600
msgid "the message id"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:0
msgid "Return type"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:0
msgid "Raises"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:602
msgid "if the message_body exceeds 160 characters"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:603
msgid "if the message_body is not a basestring"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:605
msgid ""
"It is also possible to combine parameter type and description, if the type "
"is a single word, like this::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:608
msgid ":param int priority: The priority of the message, can be a number 1-5"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:612
msgid ""
"Container types such as lists and dictionaries can be linked automatically "
"using the following syntax::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:615
msgid ""
":type priorities: list(int)\n"
":type priorities: list[int]\n"
":type mapping: dict(str, int)\n"
":type mapping: dict[str, int]\n"
":type point: tuple(float, float)\n"
":type point: tuple[float, float]"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:622
msgid ""
"Multiple types in a type field will be linked automatically if separated by "
"the word \"or\"::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:625
msgid ""
":type an_arg: int or None\n"
":vartype a_var: str or int\n"
":rtype: float or str"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:632
msgid "Cross-referencing Python objects"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:634
msgid ""
"The following roles refer to objects in modules and are possibly hyperlinked "
"if a matching identifier is found:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:639
msgid ""
"Reference a module; a dotted name may be used.  This should also be used for "
"package names."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:644
msgid ""
"Reference a Python function; dotted names may be used.  The role text needs "
"not include trailing parentheses to enhance readability; they will be added "
"automatically by Sphinx if the :confval:`add_function_parentheses` config "
"value is ``True`` (the default)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:651
msgid "Reference a module-level variable."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:655
msgid ""
"Reference a \"defined\" constant.  This may be a Python variable that is not "
"intended to be changed."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:660
msgid "Reference a class; a dotted name may be used."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:664
msgid ""
"Reference a method of an object.  The role text can include the type name "
"and the method name; if it occurs within the description of a type, the type "
"name can be omitted.  A dotted name may be used."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:670
msgid "Reference a data attribute of an object."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:672
msgid "The role is also able to refer to property."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:676
msgid "Reference an exception.  A dotted name may be used."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:680
msgid ""
"Reference an object of unspecified type.  Useful e.g. as the :confval:"
"`default_role`."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:685
msgid ""
"The name enclosed in this markup can include a module name and/or a class "
"name. For example, ``:py:func:`filter``` could refer to a function named "
"``filter`` in the current module, or the built-in function of that name.  In "
"contrast, ``:py:func:`foo.filter``` clearly refers to the ``filter`` "
"function in the ``foo`` module."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:691
msgid ""
"Normally, names in these roles are searched first without any further "
"qualification, then with the current module name prepended, then with the "
"current module and class name (if any) prepended.  If you prefix the name "
"with a dot, this order is reversed.  For example, in the documentation of "
"Python's :mod:`codecs` module, ``:py:func:`open``` always refers to the "
"built-in function, while ``:py:func:`.open``` refers to :func:`codecs.open`."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:698
msgid ""
"A similar heuristic is used to determine whether the name is an attribute of "
"the currently documented class."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:701
msgid ""
"Also, if the name is prefixed with a dot, and no exact match is found, the "
"target is taken as a suffix and all object names with that suffix are "
"searched. For example, ``:py:meth:`.TarFile.close``` references the "
"``tarfile.TarFile.close()`` function, even if the current module is not "
"``tarfile``.  Since this can get ambiguous, if there is more than one "
"possible match, you will get a warning from Sphinx."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:708
msgid ""
"Note that you can combine the ``~`` and ``.`` prefixes: ``:py:meth:`~."
"TarFile.close``` will reference the ``tarfile.TarFile.close()`` method, but "
"the visible link caption will only be ``close()``."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:716
msgid "The C Domain"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:718
msgid "The C domain (name **c**) is suited for documentation of C API."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:723
msgid "Describes a C struct member or variable. Example signature::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:725
msgid ".. c:member:: PyObject *PyTypeObject.tp_bases"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:727
msgid "The difference between the two directives is only cosmetic."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:731
msgid "Describes a C function. The signature should be given as in C, e.g.::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:733
msgid ""
".. c:function:: PyObject *PyType_GenericAlloc(PyTypeObject *type, Py_ssize_t "
"nitems)"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:735
msgid ""
"Note that you don't have to backslash-escape asterisks in the signature, as "
"it is not parsed by the reST inliner."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:738
msgid ""
"In the description of a function you can use the following info fields (see "
"also :ref:`info-field-lists`)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:741
msgid ""
"``param``, ``parameter``, ``arg``, ``argument``, Description of a parameter."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:743
msgid ""
"``type``: Type of a parameter, written as if passed to the :rst:role:`c:"
"expr` role."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:746
msgid ""
"``rtype``: Return type, written as if passed to the :rst:role:`c:expr` role."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:748
#: ../../../usage/restructuredtext/domains.rst:1603
msgid ""
"``retval``, ``retvals``: An alternative to ``returns`` for describing the "
"result of the function."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:751
#: ../../../usage/restructuredtext/domains.rst:1607
msgid "The ``retval`` field type."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:754
#: ../../../usage/restructuredtext/domains.rst:907
#: ../../../usage/restructuredtext/domains.rst:1364
#: ../../../usage/restructuredtext/domains.rst:2028
msgid "For example::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:756
msgid ""
".. c:function:: PyObject *PyType_GenericAlloc(PyTypeObject *type, Py_ssize_t "
"nitems)\n"
"\n"
"   :param type: description of the first parameter.\n"
"   :param nitems: description of the second parameter.\n"
"   :returns: a result.\n"
"   :retval NULL: under some conditions.\n"
"   :retval NULL: under some other conditions as well."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:764
msgid "which renders as"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:771
msgid "description of the first parameter."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:772
msgid "description of the second parameter."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:773
msgid "a result."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:0
msgid "Return values"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:774
msgid "under some conditions."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:775
msgid "under some other conditions as well."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:781
msgid ""
"Describes a C macro, i.e., a C-language ``#define``, without the replacement "
"text."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:784
msgid ""
"In the description of a macro you can use the same info fields as for the :"
"rst:dir:`c:function` directive."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:787
msgid "The function style variant."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:792
msgid "Describes a C struct."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:798
msgid "Describes a C union."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:804
msgid "Describes a C enum."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:810
msgid "Describes a C enumerator."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:817
msgid ""
"Describes a C type, either as a typedef, or the alias for an unspecified "
"type."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:823
msgid "Cross-referencing C constructs"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:825
msgid ""
"The following roles create cross-references to C-language constructs if they "
"are defined in the documentation:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:839
msgid ""
"Reference a C declaration, as defined above. Note that :rst:role:`c:"
"member`, :rst:role:`c:data`, and :rst:role:`c:var` are equivalent."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:843
msgid "The var, struct, union, enum, and enumerator roles."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:848
#: ../../../usage/restructuredtext/domains.rst:1305
msgid "Anonymous Entities"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:850
msgid ""
"C supports anonymous structs, enums, and unions. For the sake of "
"documentation they must be given some name that starts with ``@``, e.g., "
"``@42`` or ``@data``. These names can also be used in cross-references, "
"though nested symbols will be found even when omitted. The ``@...`` name "
"will always be rendered as **[anonymous]** (possibly as a link)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:858
#: ../../../usage/restructuredtext/domains.rst:1315
msgid "Example::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:860
msgid ""
".. c:struct:: Data\n"
"\n"
"   .. c:union:: @data\n"
"\n"
"      .. c:var:: int a\n"
"\n"
"      .. c:var:: double b\n"
"\n"
"Explicit ref: :c:var:`Data.@data.a`. Short-hand ref: :c:var:`Data.a`."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:870
#: ../../../usage/restructuredtext/domains.rst:1327
msgid "This will be rendered as:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:888
msgid "Explicit ref: :c:var:`Data.@data.a`. Short-hand ref: :c:var:`Data.a`."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:894
#: ../../../usage/restructuredtext/domains.rst:1351
msgid "Aliasing Declarations"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:898
msgid ""
"Sometimes it may be helpful list declarations elsewhere than their main "
"documentation, e.g., when creating a synopsis of an interface. The following "
"directive can be used for this purpose."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:904
msgid ""
"Insert one or more alias declarations. Each entity can be specified as they "
"can in the :rst:role:`c:any` role."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:909
msgid ""
".. c:var:: int data\n"
".. c:function:: int f(double k)\n"
"\n"
".. c:alias:: data\n"
"             f"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:915
#: ../../../usage/restructuredtext/domains.rst:1369
#: ../../../usage/restructuredtext/domains.rst:1379
msgid "becomes"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:927
#: ../../../usage/restructuredtext/domains.rst:1294
#: ../../../usage/restructuredtext/domains.rst:1388
msgid "Options"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:930
#: ../../../usage/restructuredtext/domains.rst:1391
msgid ""
"Insert nested declarations as well, up to the total depth given. Use 0 for "
"infinite depth and 1 for just the mentioned declaration. Defaults to 1."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:938
#: ../../../usage/restructuredtext/domains.rst:1399
msgid ""
"Skip the mentioned declarations and only render nested declarations. "
"Requires ``maxdepth`` either 0 or at least 2."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:948
#: ../../../usage/restructuredtext/domains.rst:1466
msgid "Inline Expressions and Types"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:953
msgid ""
"Insert a C expression or type either as inline code (``cpp:expr``) or inline "
"text (``cpp:texpr``). For example::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:956
msgid ""
".. c:var:: int a = 42\n"
"\n"
".. c:function:: int f(int i)\n"
"\n"
"An expression: :c:expr:`a * f(a)` (or as text: :c:texpr:`a * f(a)`).\n"
"\n"
"A type: :c:expr:`const Data*`\n"
"(or as text :c:texpr:`const Data*`)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:965
#: ../../../usage/restructuredtext/domains.rst:1483
msgid "will be rendered as follows:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:975
msgid "An expression: :c:expr:`a * f(a)` (or as text: :c:texpr:`a * f(a)`)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:977
msgid "A type: :c:expr:`const Data*` (or as text :c:texpr:`const Data*`)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:984
#: ../../../usage/restructuredtext/domains.rst:1505
msgid "Namespacing"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:988
msgid ""
"The C language it self does not support namespacing, but it can sometimes be "
"useful to emulate it in documentation, e.g., to show alternate declarations. "
"The feature may also be used to document members of structs/unions/enums "
"separate from their parent declaration."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:993
msgid ""
"The current scope can be changed using three namespace directives.  They "
"manage a stack declarations where ``c:namespace`` resets the stack and "
"changes a given scope."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:997
msgid ""
"The ``c:namespace-push`` directive changes the scope to a given inner scope "
"of the current one."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1000
msgid ""
"The ``c:namespace-pop`` directive undoes the most recent ``c:namespace-"
"push`` directive."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1005
msgid ""
"Changes the current scope for the subsequent objects to the given scope, and "
"resets the namespace directive stack. Note that nested scopes can be "
"specified by separating with a dot, e.g.::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1009
msgid ".. c:namespace:: Namespace1.Namespace2.SomeStruct.AnInnerStruct"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1011
#: ../../../usage/restructuredtext/domains.rst:1526
msgid ""
"All subsequent objects will be defined as if their name were declared with "
"the scope prepended. The subsequent cross-references will be searched for "
"starting in the current scope."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1015
msgid "Using ``NULL`` or ``0`` as the scope will change to global scope."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1019
#: ../../../usage/restructuredtext/domains.rst:1557
msgid "Change the scope relatively to the current scope. For example, after::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1021
msgid ""
".. c:namespace:: A.B\n"
"\n"
".. c:namespace-push:: C.D"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1025
msgid "the current scope will be ``A.B.C.D``."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1029
msgid ""
"Undo the previous ``c:namespace-push`` directive (*not* just pop a scope). "
"For example, after::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1032
msgid ""
".. c:namespace:: A.B\n"
"\n"
".. c:namespace-push:: C.D\n"
"\n"
".. c:namespace-pop::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1038
msgid "the current scope will be ``A.B`` (*not* ``A.B.C``)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1040
msgid ""
"If no previous ``c:namespace-push`` directive has been used, but only a ``c:"
"namespace`` directive, then the current scope will be reset to global "
"scope.  That is, ``.. c:namespace:: A.B`` is equivalent to::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1044
msgid ""
".. c:namespace:: NULL\n"
"\n"
".. c:namespace-push:: A.B"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1049
#: ../../../usage/restructuredtext/domains.rst:1769
msgid "Configuration Variables"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1051
msgid "See :ref:`c-config`."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1057
msgid "The C++ Domain"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1059
msgid "The C++ domain (name **cpp**) supports documenting C++ projects."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1062
msgid "Directives for Declaring Entities"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1064
msgid ""
"The following directives are available. All declarations can start with a "
"visibility statement (``public``, ``private`` or ``protected``)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1070
msgid ""
"Describe a class/struct, possibly with specification of inheritance, e.g.,::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1072
msgid ".. cpp:class:: MyClass : public MyBase, MyOtherBase"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1074
msgid ""
"The difference between :rst:dir:`cpp:class` and :rst:dir:`cpp:struct` is "
"only cosmetic: the prefix rendered in the output, and the specifier shown in "
"the index."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1078
msgid "The class can be directly declared inside a nested scope, e.g.,::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1080
msgid ".. cpp:class:: OuterScope::MyClass : public MyBase, MyOtherBase"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1082
msgid "A class template can be declared::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1084
msgid ".. cpp:class:: template<typename T, std::size_t N> std::array"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1086
msgid "or with a line break::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1088
msgid ""
".. cpp:class:: template<typename T, std::size_t N> \\\n"
"               std::array"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1091
msgid "Full and partial template specialisations can be declared::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1093
msgid ""
".. cpp:class:: template<> \\\n"
"               std::array<bool, 256>\n"
"\n"
".. cpp:class:: template<typename T> \\\n"
"               std::array<T, 42>"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1099
msgid "The :rst:dir:`cpp:struct` directive."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1104
msgid "Describe a function or member function, e.g.,::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1106
msgid ""
".. cpp:function:: bool myMethod(int arg1, std::string arg2)\n"
"\n"
"   A function with parameters and types.\n"
"\n"
".. cpp:function:: bool myMethod(int, double)\n"
"\n"
"   A function with unnamed parameters.\n"
"\n"
".. cpp:function:: const T &MyClass::operator[](std::size_t i) const\n"
"\n"
"   An overload for the indexing operator.\n"
"\n"
".. cpp:function:: operator bool() const\n"
"\n"
"   A casting operator.\n"
"\n"
".. cpp:function:: constexpr void foo(std::string &bar[2]) noexcept\n"
"\n"
"   A constexpr function.\n"
"\n"
".. cpp:function:: MyClass::MyClass(const MyClass&) = default\n"
"\n"
"   A copy constructor with default implementation."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1130
msgid "Function templates can also be described::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1132
msgid ""
".. cpp:function:: template<typename U> \\\n"
"                  void print(U &&u)"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1135
msgid "and function template specialisations::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1137
msgid ""
".. cpp:function:: template<> \\\n"
"                  void print(int i)"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1143
msgid "Describe a variable or member variable, e.g.,::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1145
msgid ""
".. cpp:member:: std::string MyClass::myMember\n"
"\n"
".. cpp:var:: std::string MyClass::myOtherMember[N][M]\n"
"\n"
".. cpp:member:: int a = 42"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1151
msgid "Variable templates can also be described::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1153
msgid ""
".. cpp:member:: template<class T> \\\n"
"                constexpr T pi = T(3.1415926535897932385)"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1160
msgid ""
"Describe a type as in a typedef declaration, a type alias declaration, or "
"simply the name of a type with unspecified type, e.g.,::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1163
msgid ""
".. cpp:type:: std::vector<int> MyList\n"
"\n"
"   A typedef-like declaration of a type.\n"
"\n"
".. cpp:type:: MyContainer::const_iterator\n"
"\n"
"   Declaration of a type alias with unspecified type.\n"
"\n"
".. cpp:type:: MyType = std::unordered_map<int, std::string>\n"
"\n"
"   Declaration of a type alias."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1175
msgid "A type alias can also be templated::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1177
msgid ""
".. cpp:type:: template<typename T> \\\n"
"              MyContainer = std::vector<T>"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1180
msgid "The example are rendered as follows."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1186
msgid "A typedef-like declaration of a type."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1192
msgid "Declaration of a type alias with unspecified type."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1198
msgid "Declaration of a type alias."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1209
msgid ""
"Describe a (scoped) enum, possibly with the underlying type specified.  Any "
"enumerators declared inside an unscoped enum will be declared both in the "
"enum scope and in the parent scope.  Examples::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1213
msgid ""
".. cpp:enum:: MyEnum\n"
"\n"
"   An unscoped enum.\n"
"\n"
".. cpp:enum:: MySpecificEnum : long\n"
"\n"
"   An unscoped enum with specified underlying type.\n"
"\n"
".. cpp:enum-class:: MyScopedEnum\n"
"\n"
"   A scoped enum.\n"
"\n"
".. cpp:enum-struct:: protected MyScopedVisibilityEnum : std::"
"underlying_type<MySpecificEnum>::type\n"
"\n"
"   A scoped enum with non-default visibility, and with a specified\n"
"   underlying type."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1233
msgid "Describe an enumerator, optionally with its value defined, e.g.,::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1235
msgid ""
".. cpp:enumerator:: MyEnum::myEnumerator\n"
"\n"
".. cpp:enumerator:: MyEnum::myOtherEnumerator = 42"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1241
msgid "Describe a union."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1247
#: ../../../usage/restructuredtext/domains.rst:1408
msgid ""
"The support for concepts is experimental. It is based on the current draft "
"standard and the Concepts Technical Specification. The features may change "
"as they evolve."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1251
msgid ""
"Describe a concept. It must have exactly 1 template parameter list. The name "
"may be a nested name. Example::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1254
msgid ""
".. cpp:concept:: template<typename It> std::Iterator\n"
"\n"
"   Proxy to an element of a notional sequence that can be compared,\n"
"   indirected, or incremented.\n"
"\n"
"   **Notation**\n"
"\n"
"   .. cpp:var:: It r\n"
"\n"
"      An lvalue.\n"
"\n"
"   **Valid Expressions**\n"
"\n"
"   - :cpp:expr:`*r`, when :cpp:expr:`r` is dereferenceable.\n"
"   - :cpp:expr:`++r`, with return type :cpp:expr:`It&`, when\n"
"     :cpp:expr:`r` is incrementable."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1271
msgid "This will render as follows:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1275
msgid ""
"Proxy to an element of a notional sequence that can be compared, indirected, "
"or incremented."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1278
msgid "**Notation**"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1282
msgid "An lvalue."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1284
msgid "**Valid Expressions**"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1286
msgid ":cpp:expr:`*r`, when :cpp:expr:`r` is dereferenceable."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1287
msgid ""
":cpp:expr:`++r`, with return type :cpp:expr:`It&`, when :cpp:expr:`r` is "
"incrementable."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1296
msgid "Some directives support options:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1298
msgid ""
"``:noindexentry:`` and ``:nocontentsentry:``, see :ref:`basic-domain-markup`."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1299
msgid ""
"``:tparam-line-spec:``, for templated declarations. If specified, each "
"template parameter will be rendered on a separate line."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1307
msgid ""
"C++ supports anonymous namespaces, classes, enums, and unions. For the sake "
"of documentation they must be given some name that starts with ``@``, e.g., "
"``@42`` or ``@data``. These names can also be used in cross-references and "
"(type) expressions, though nested symbols will be found even when omitted. "
"The ``@...`` name will always be rendered as **[anonymous]** (possibly as a "
"link)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1317
msgid ""
".. cpp:class:: Data\n"
"\n"
"   .. cpp:union:: @data\n"
"\n"
"      .. cpp:var:: int a\n"
"\n"
"      .. cpp:var:: double b\n"
"\n"
"Explicit ref: :cpp:var:`Data::@data::a`. Short-hand ref: :cpp:var:`Data::a`."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1345
msgid ""
"Explicit ref: :cpp:var:`Data::@data::a`. Short-hand ref: :cpp:var:`Data::a`."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1353
msgid ""
"Sometimes it may be helpful list declarations elsewhere than their main "
"documentation, e.g., when creating a synopsis of a class interface. The "
"following directive can be used for this purpose."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1359
msgid ""
"Insert one or more alias declarations. Each entity can be specified as they "
"can in the :rst:role:`cpp:any` role. If the name of a function is given (as "
"opposed to the complete signature), then all overloads of the function will "
"be listed."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1366
msgid ""
".. cpp:alias:: Data::a\n"
"               overload_example::C::f"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1374
msgid "whereas::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1376
msgid ""
".. cpp:alias:: void overload_example::C::f(double d) const\n"
"               void overload_example::C::f(double d)"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1406
msgid "Constrained Templates"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1412
msgid "Sphinx does not currently support ``requires`` clauses."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1415
msgid "Placeholders"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1417
msgid ""
"Declarations may use the name of a concept to introduce constrained template "
"parameters, or the keyword ``auto`` to introduce unconstrained template "
"parameters::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1421
msgid ""
".. cpp:function:: void f(auto &&arg)\n"
"\n"
"   A function template with a single unconstrained template parameter.\n"
"\n"
".. cpp:function:: void f(std::Iterator it)\n"
"\n"
"   A function template with a single template parameter, constrained by the\n"
"   Iterator concept."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1431
msgid "Template Introductions"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1433
msgid ""
"Simple constrained function or class templates can be declared with a "
"`template introduction` instead of a template parameter list::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1436
msgid ""
".. cpp:function:: std::Iterator{It} void advance(It &it)\n"
"\n"
"    A function template with a template parameter constrained to be an\n"
"    Iterator.\n"
"\n"
".. cpp:class:: std::LessThanComparable{T} MySortedContainer\n"
"\n"
"    A class template with a template parameter constrained to be\n"
"    LessThanComparable."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1446
msgid "They are rendered as follows."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1452
msgid ""
"A function template with a template parameter constrained to be an Iterator."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1458
msgid ""
"A class template with a template parameter constrained to be "
"LessThanComparable."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1461
msgid ""
"Note however that no checking is performed with respect to parameter "
"compatibility. E.g., ``Iterator{A, B, C}`` will be accepted as an "
"introduction even though it would not be valid C++."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1471
msgid ""
"Insert a C++ expression or type either as inline code (``cpp:expr``) or "
"inline text (``cpp:texpr``). For example::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1474
msgid ""
".. cpp:var:: int a = 42\n"
"\n"
".. cpp:function:: int f(int i)\n"
"\n"
"An expression: :cpp:expr:`a * f(a)` (or as text: :cpp:texpr:`a * f(a)`).\n"
"\n"
"A type: :cpp:expr:`const MySortedContainer<int>&`\n"
"(or as text :cpp:texpr:`const MySortedContainer<int>&`)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1493
msgid ""
"An expression: :cpp:expr:`a * f(a)` (or as text: :cpp:texpr:`a * f(a)`)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1495
msgid ""
"A type: :cpp:expr:`const MySortedContainer<int>&` (or as text :cpp:texpr:"
"`const MySortedContainer<int>&`)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1498
msgid "The :rst:role:`cpp:expr` role."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1501
msgid "The :rst:role:`cpp:texpr` role."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1507
msgid ""
"Declarations in the C++ domain are as default placed in global scope.  The "
"current scope can be changed using three namespace directives.  They manage "
"a stack declarations where ``cpp:namespace`` resets the stack and changes a "
"given scope."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1512
msgid ""
"The ``cpp:namespace-push`` directive changes the scope to a given inner "
"scope of the current one."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1515
msgid ""
"The ``cpp:namespace-pop`` directive undoes the most recent ``cpp:namespace-"
"push`` directive."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1520
msgid ""
"Changes the current scope for the subsequent objects to the given scope, and "
"resets the namespace directive stack.  Note that the namespace does not need "
"to correspond to C++ namespaces, but can end in names of classes, e.g.,::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1524
msgid ".. cpp:namespace:: Namespace1::Namespace2::SomeClass::AnInnerClass"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1530
msgid ""
"Using ``NULL``, ``0``, or ``nullptr`` as the scope will change to global "
"scope."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1533
msgid "A namespace declaration can also be templated, e.g.,::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1535
msgid ""
".. cpp:class:: template<typename T> \\\n"
"               std::vector\n"
"\n"
".. cpp:namespace:: template<typename T> std::vector\n"
"\n"
".. cpp:function:: std::size_t size() const"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1542
msgid ""
"declares ``size`` as a member function of the class template ``std::"
"vector``.  Equivalently this could have been declared using::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1545
msgid ""
".. cpp:class:: template<typename T> \\\n"
"               std::vector\n"
"\n"
"   .. cpp:function:: std::size_t size() const"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1550
msgid "or::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1552
msgid ""
".. cpp:class:: template<typename T> \\\n"
"               std::vector"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1559
msgid ""
".. cpp:namespace:: A::B\n"
"\n"
".. cpp:namespace-push:: C::D"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1563
msgid "the current scope will be ``A::B::C::D``."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1569
msgid ""
"Undo the previous ``cpp:namespace-push`` directive (*not* just pop a scope). "
"For example, after::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1572
msgid ""
".. cpp:namespace:: A::B\n"
"\n"
".. cpp:namespace-push:: C::D\n"
"\n"
".. cpp:namespace-pop::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1578
msgid "the current scope will be ``A::B`` (*not* ``A::B::C``)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1580
msgid ""
"If no previous ``cpp:namespace-push`` directive has been used, but only a "
"``cpp:namespace`` directive, then the current scope will be reset to global "
"scope.  That is, ``.. cpp:namespace:: A::B`` is equivalent to::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1584
msgid ""
".. cpp:namespace:: nullptr\n"
"\n"
".. cpp:namespace-push:: A::B"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1593
msgid ""
"All the C++ directives for declaring entities support the following info "
"fields (see also :ref:`info-field-lists`):"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1596
msgid "``tparam``: Description of a template parameter."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1598
msgid ""
"The :rst:dir:`cpp:function` directive additionally supports the following "
"fields:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1601
msgid ""
"``param``, ``parameter``, ``arg``, ``argument``: Description of a parameter."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1602
msgid "``returns``, ``return``: Description of a return value."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1605
msgid ""
"`throws`, `throw`, `exception`: Description of a possibly thrown exception."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1613
msgid "Cross-referencing"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1615
msgid "These roles link to the given declaration types:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1628
msgid ""
"Reference a C++ declaration by name (see below for details).  The name must "
"be properly qualified relative to the position of the link."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1631
msgid ""
"The :rst:role:`cpp:struct` role as alias for the :rst:role:`cpp:class` role."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1635
msgid "Note on References with Templates Parameters/Arguments"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1637
msgid ""
"These roles follow the Sphinx :ref:`xref-syntax` rules. This means care must "
"be taken when referencing a (partial) template specialization, e.g. if the "
"link looks like this: ``:cpp:class:`MyClass<int>```. This is interpreted as "
"a link to ``int`` with a title of ``MyClass``. In this case, escape the "
"opening angle bracket with a backslash, like this: ``:cpp:class:"
"`MyClass\\<int>```."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1644
msgid ""
"When a custom title is not needed it may be useful to use the roles for "
"inline expressions, :rst:role:`cpp:expr` and :rst:role:`cpp:texpr`, where "
"angle brackets do not need escaping."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1649
msgid "Declarations without template parameters and template arguments"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1651
msgid ""
"For linking to non-templated declarations the name must be a nested name, e."
"g., ``f`` or ``MyClass::f``."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1656
msgid "Overloaded (member) functions"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1658
msgid ""
"When a (member) function is referenced using just its name, the reference "
"will point to an arbitrary matching overload. The :rst:role:`cpp:any` and :"
"rst:role:`cpp:func` roles use an alternative format, which simply is a "
"complete function declaration. This will resolve to the exact matching "
"overload. As example, consider the following class declaration:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1673
msgid "References using the :rst:role:`cpp:func` role:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1675
msgid "Arbitrary overload: ``C::f``, :cpp:func:`C::f`"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1676
msgid "Also arbitrary overload: ``C::f()``, :cpp:func:`C::f()`"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1677
msgid "Specific overload: ``void C::f()``, :cpp:func:`void C::f()`"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1678
msgid "Specific overload: ``void C::f(int)``, :cpp:func:`void C::f(int)`"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1679
msgid "Specific overload: ``void C::f(double)``, :cpp:func:`void C::f(double)`"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1680
msgid ""
"Specific overload: ``void C::f(double) const``, :cpp:func:`void C::f(double) "
"const`"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1683
msgid ""
"Note that the :confval:`add_function_parentheses` configuration variable "
"does not influence specific overload references."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1690
msgid "Templated declarations"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1692
#: ../../../usage/restructuredtext/domains.rst:1729
msgid "Assume the following declarations."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1702
msgid ""
"In general the reference must include the template parameter declarations, "
"and template arguments for the prefix of qualified names. For example:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1705
msgid ""
"``template\\<typename TOuter> Wrapper::Outer`` (:cpp:class:"
"`template\\<typename TOuter> Wrapper::Outer`)"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1707
msgid ""
"``template\\<typename TOuter> template\\<typename TInner> Wrapper::"
"Outer<TOuter>::Inner`` (:cpp:class:`template\\<typename TOuter> "
"template\\<typename TInner> Wrapper::Outer<TOuter>::Inner`)"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1710
msgid ""
"Currently the lookup only succeed if the template parameter identifiers are "
"equal strings.  That is, ``template\\<typename UOuter> Wrapper::Outer`` will "
"not work."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1714
msgid ""
"As a shorthand notation, if a template parameter list is omitted, then the "
"lookup will assume either a primary template or a non-template, but not a "
"partial template specialisation. This means the following references work as "
"well:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1719
msgid "``Wrapper::Outer`` (:cpp:class:`Wrapper::Outer`)"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1721
msgid "``Wrapper::Outer::Inner`` (:cpp:class:`Wrapper::Outer::Inner`)"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1723
msgid ""
"``template\\<typename TInner> Wrapper::Outer::Inner`` (:cpp:class:"
"`template\\<typename TInner> Wrapper::Outer::Inner`)"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1727
msgid "(Full) Template Specialisations"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1746
msgid ""
"In general the reference must include a template parameter list for each "
"template argument list.  The full specialisation above can therefore be "
"referenced with ``template\\<> Outer\\<int>`` (:cpp:class:`template\\<> "
"Outer\\<int>`) and ``template\\<> template\\<> Outer\\<int>::Inner\\<bool>`` "
"(:cpp:class:`template\\<> template\\<> Outer\\<int>::Inner\\<bool>`).  As a "
"shorthand the empty template parameter list can be omitted, e.g., "
"``Outer\\<int>`` (:cpp:class:`Outer\\<int>`) and ``Outer\\<int>::"
"Inner\\<bool>`` (:cpp:class:`Outer\\<int>::Inner\\<bool>`)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1756
msgid "Partial Template Specialisations"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1758
msgid "Assume the following declaration."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1763
msgid ""
"References to partial specialisations must always include the template "
"parameter lists, e.g., ``template\\<typename T> Outer\\<T*>`` (:cpp:class:"
"`template\\<typename T> Outer\\<T*>`).  Currently the lookup only succeed if "
"the template parameter identifiers are equal strings."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1771
msgid "See :ref:`cpp-config`."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1776
msgid "The Standard Domain"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1778
msgid ""
"The so-called \"standard\" domain collects all markup that doesn't warrant a "
"domain of its own.  Its directives and roles are not prefixed with a domain "
"name."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1782
msgid ""
"The standard domain is also where custom object descriptions, added using "
"the :func:`~sphinx.application.Sphinx.add_object_type` API, are placed."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1785
msgid ""
"There is a set of directives allowing documenting command-line programs:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1789
msgid ""
"Describes a command line argument or switch.  Option argument names should "
"be enclosed in angle brackets.  Examples::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1792
msgid ""
".. option:: dest_dir\n"
"\n"
"   Destination directory.\n"
"\n"
".. option:: -m <module>, --module <module>\n"
"\n"
"   Run a module as a script."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1800
msgid ""
"The directive will create cross-reference targets for the given options, "
"referenceable by :rst:role:`option` (in the example case, you'd use "
"something like ``:option:`dest_dir```, ``:option:`-m```, or ``:option:`--"
"module```)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1806
msgid ""
"One can cross-reference including an option value: ``:option:`--"
"module=foobar```, ,``:option:`--module[=foobar]``` or ``:option:`--module "
"foobar```."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1809
msgid ""
"Use :confval:`option_emphasise_placeholders` for parsing of \"variable "
"part\" of a literal text (similarly to the :rst:role:`samp` role)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1812
msgid ""
"``cmdoption`` directive is a deprecated alias for the ``option`` directive."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1816
msgid ""
"Describes an environment variable that the documented code or program uses "
"or defines.  Referenceable by :rst:role:`envvar`."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1821
msgid ""
"Like :rst:dir:`py:currentmodule`, this directive produces no output. "
"Instead, it serves to notify Sphinx that all following :rst:dir:`option` "
"directives document options for the program called *name*."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1825
msgid ""
"If you use :rst:dir:`program`, you have to qualify the references in your :"
"rst:role:`option` roles by the program name, so if you have the following "
"situation ::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1829
msgid ""
".. program:: rm\n"
"\n"
".. option:: -r\n"
"\n"
"   Work recursively.\n"
"\n"
".. program:: svn\n"
"\n"
".. option:: -r <revision>\n"
"\n"
"   Specify the revision to work upon."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1841
msgid ""
"then ``:option:`rm -r``` would refer to the first option, while ``:option:"
"`svn -r``` would refer to the second one."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1844
msgid ""
"If ``None`` is passed to the argument, the directive will reset the current "
"program name."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1847
msgid ""
"The program name may contain spaces (in case you want to document "
"subcommands like ``svn add`` and ``svn commit`` separately)."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1852
msgid ""
"There is also a very generic object description directive, which is not tied "
"to any domain:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1858
msgid ""
"This directive produces the same formatting as the specific ones provided by "
"domains, but does not create index entries or cross-referencing targets. "
"Example::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1862
msgid ""
".. describe:: PAPER\n"
"\n"
"   You can set this variable to select a paper size."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1868
msgid "The JavaScript Domain"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1870
msgid "The JavaScript domain (name **js**) provides the following directives:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1874
msgid ""
"This directive sets the module name for object declarations that follow "
"after. The module name is used in the global module index and in cross "
"references. This directive does not create an object heading like :rst:dir:"
"`py:class` would, for example."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1879
msgid ""
"By default, this directive will create a linkable entity and will cause an "
"entry in the global module index, unless the ``noindex`` option is "
"specified.  If this option is specified, the directive will only update the "
"current module name."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1891
msgid ""
"Describes a JavaScript function or method.  If you want to describe "
"arguments as optional use square brackets as :ref:`documented <signatures>` "
"for Python signatures."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1895
msgid ""
"You can use fields to give more details about arguments and their expected "
"types, errors which may be thrown by the function, and the value being "
"returned::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1899
msgid ""
".. js:function:: $.getJSON(href, callback[, errback])\n"
"\n"
"   :param string href: An URI to the location of the resource.\n"
"   :param callback: Gets called with the object.\n"
"   :param errback:\n"
"       Gets called in case the request fails. And a lot of other\n"
"       text so we need multiple lines.\n"
"   :throws SomeError: For whatever reason in that case.\n"
"   :returns: Something."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1909
#: ../../../usage/restructuredtext/domains.rst:1939
msgid "This is rendered as:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:0
msgid "Arguments"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1914
msgid "An URI to the location of the resource."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1915
msgid "Gets called with the object."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1916
msgid ""
"Gets called in case the request fails. And a lot of other text so we need "
"multiple lines."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:0
msgid "Throws"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1919
msgid "For whatever reason in that case."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1920
msgid "Something."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1924
msgid ""
"This directive is an alias for :rst:dir:`js:function`, however it describes "
"a function that is implemented as a method on a class object."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1931
msgid ""
"Describes a constructor that creates an object.  This is basically like a "
"function but will show up with a `class` prefix::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1934
msgid ""
".. js:class:: MyAnimal(name[, age])\n"
"\n"
"   :param string name: The name of the animal\n"
"   :param number age: an optional age for the animal"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1944
msgid "The name of the animal"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1945
msgid "an optional age for the animal"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1949
msgid "Describes a global variable or constant."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1953
msgid "Describes the attribute *name* of *object*."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1957
#: ../../../usage/restructuredtext/domains.rst:2054
msgid "These roles are provided to refer to the described objects:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1968
msgid "The reStructuredText domain"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1970
msgid ""
"The reStructuredText domain (name **rst**) provides the following directives:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1974
msgid ""
"Describes a reST directive.  The *name* can be a single directive name or "
"actual directive syntax (`..` prefix and `::` suffix) with arguments that "
"will be rendered differently.  For example::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1978
msgid ""
".. rst:directive:: foo\n"
"\n"
"   Foo description.\n"
"\n"
".. rst:directive:: .. bar:: baz\n"
"\n"
"   Bar description."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1986
#: ../../../usage/restructuredtext/domains.rst:2010
#: ../../../usage/restructuredtext/domains.rst:2045
msgid "will be rendered as:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1991
#: ../../../usage/restructuredtext/domains.rst:2050
msgid "Foo description."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:1996
msgid "Bar description."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:2000
msgid ""
"Describes an option for reST directive.  The *name* can be a single option "
"name or option name with arguments which separated with colon (``:``). For "
"example::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:2004
msgid ""
".. rst:directive:: toctree\n"
"\n"
"   .. rst:directive:option:: caption: caption of ToC\n"
"\n"
"   .. rst:directive:option:: glob"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:2026
msgid "Describe the type of option value."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:2030
msgid ""
".. rst:directive:: toctree\n"
"\n"
"   .. rst:directive:option:: maxdepth\n"
"      :type: integer or no value"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:2039
msgid "Describes a reST role.  For example::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:2041
msgid ""
".. rst:role:: foo\n"
"\n"
"   Foo description."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:2062
msgid "The Math Domain"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:2064
msgid "The math domain (name **math**) provides the following roles:"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:2068
msgid ""
"Role for cross-referencing equations defined by :rst:dir:`math` directive "
"via their label.  Example::"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:2071
msgid ""
".. math:: e^{i\\pi} + 1 = 0\n"
"   :label: euler\n"
"\n"
"Euler's identity, equation :math:numref:`euler`, was elected one of the\n"
"most beautiful mathematical formulas."
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:2080
msgid "More domains"
msgstr ""

#: ../../../usage/restructuredtext/domains.rst:2082
msgid ""
"The sphinx-contrib_ repository contains more domains available as "
"extensions; currently Ada_, CoffeeScript_, Erlang_, HTTP_, Lasso_, MATLAB_, "
"PHP_, and Ruby_ domains. Also available are domains for `Chapel`_, `Common "
"Lisp`_, dqn_, Go_, Jinja_, Operation_, and Scala_."
msgstr ""
