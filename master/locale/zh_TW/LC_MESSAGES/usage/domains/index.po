# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, the Sphinx developers
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-03 20:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../usage/domains/index.rst:7
msgid "Domains"
msgstr ""

#: ../../../usage/domains/index.rst:11
msgid ""
"Originally, Sphinx was conceived for a single project, the documentation of "
"the Python language.  Shortly afterwards, it was made available for everyone "
"as a documentation tool, but the documentation of Python modules remained "
"deeply built in -- the most fundamental directives, like ``function``, were "
"designed for Python objects.  Since Sphinx has become somewhat popular, "
"interest developed in using it for many different purposes: C/C++ projects, "
"JavaScript, or even reStructuredText markup (like in this documentation)."
msgstr ""

#: ../../../usage/domains/index.rst:19
msgid ""
"While this was always possible, it is now much easier to easily support "
"documentation of projects using different programming languages or even ones "
"not supported by the main Sphinx distribution, by providing a **domain** for "
"every such purpose."
msgstr ""

#: ../../../usage/domains/index.rst:24
msgid ""
"A domain is a collection of markup (reStructuredText :term:`directive`\\ s "
"and :term:`role`\\ s) to describe and link to :term:`object`\\ s belonging "
"together, e.g. elements of a programming language.  Directive and role names "
"in a domain have names like ``domain:name``, e.g. ``py:function``.  Domains "
"can also provide custom indices (like the Python Module Index)."
msgstr ""

#: ../../../usage/domains/index.rst:30
msgid ""
"Having domains means that there are no naming problems when one set of "
"documentation wants to refer to e.g. C++ and Python classes.  It also means "
"that extensions that support the documentation of whole new languages are "
"much easier to write."
msgstr ""

#: ../../../usage/domains/index.rst:35
msgid ""
"This section describes what the domains that are included with Sphinx "
"provide. The domain API is documented as well, in the section :ref:`domain-"
"api`."
msgstr ""

#: ../../../usage/domains/index.rst:39
msgid "Built-in domains"
msgstr ""

#: ../../../usage/domains/index.rst:41
msgid "The following domains are included within Sphinx:"
msgstr ""

#: ../../../usage/domains/index.rst:56
msgid "Third-party domains"
msgstr ""

#: ../../../usage/domains/index.rst:58
msgid "Several third-party domains are available as extensions, including:"
msgstr ""

#: ../../../usage/domains/index.rst:60
msgid "`Ada <https://pypi.org/project/sphinxcontrib-adadomain/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:61
msgid "`Antlr4 <https://pypi.org/project/sphinx-a4doc/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:62
msgid "`Bazel <https://pypi.org/project/sphinx-bazel/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:63
msgid "`BibTex <https://pypi.org/project/sphinxcontrib-bibtex/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:64
msgid "`Chapel <https://pypi.org/project/sphinxcontrib-chapeldomain/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:65
msgid "`CMake <https://pypi.org/project/sphinxcontrib-moderncmakedomain/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:66
msgid "`Common Lisp <https://pypi.org/project/sphinxcontrib-cldomain/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:67
msgid "`Erlang <https://pypi.org/project/sphinxcontrib-erlangdomain/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:68
msgid "`Fortran <https://pypi.org/project/sphinx-fortran/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:69
msgid "`GraphQL <https://pypi.org/project/graphqldomain/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:70
msgid "`Go <https://pypi.org/project/sphinxcontrib-golangdomain/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:71
msgid "`HTTP <https://pypi.org/project/sphinxcontrib-httpdomain/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:72
msgid "`Hy <https://pypi.org/project/sphinxcontrib-hydomain/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:73
msgid "`Lua <https://pypi.org/project/sphinxcontrib-luadomain/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:74
msgid "`MATLAB <https://pypi.org/project/sphinxcontrib-matlabdomain/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:75
msgid "`PHP <https://pypi.org/project/sphinxcontrib-phpdomain/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:76
msgid "`Ruby <https://pypi.org/project/sphinxcontrib-rubydomain/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:77
msgid "`Rust <https://pypi.org/project/sphinxcontrib-rust/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:78
msgid "`Verilog <https://pypi.org/project/sphinx-verilog-domain/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:79
msgid "`VHDL <https://pypi.org/project/sphinx-vhdl/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:80
msgid "`Visual Basic <https://pypi.org/project/sphinx-vb-domain/>`__"
msgstr ""

#: ../../../usage/domains/index.rst:82
msgid ""
"Other domains may be found on the Python Package Index (via the "
"`Framework :: Sphinx :: Domain`__ classifier), `GitHub <https://github.com/"
"search?q=sphinx%20domain&type=repositories>`__, or `GitLab <https://gitlab."
"com/explore/projects?name=sphinx%20domain>`__."
msgstr ""

#: ../../../usage/domains/index.rst:105
msgid "Basic Markup"
msgstr ""

#: ../../../usage/domains/index.rst:107
msgid ""
"Most domains provide a number of :dfn:`object description directives`, used "
"to describe specific objects provided by modules.  Each directive requires "
"one or more signatures to provide basic information about what is being "
"described, and the content should be the description."
msgstr ""

#: ../../../usage/domains/index.rst:112
msgid ""
"A domain will typically keep an internal index of all entities to aid cross-"
"referencing. Typically, it will also add entries in the shown general index. "
"If you want to suppress the addition of an entry in the shown index, you can "
"give the directive option flag ``:no-index-entry:``. If you want to exclude "
"the object description from the table of contents, you can give the "
"directive option flag ``:no-contents-entry:``. If you want to typeset an "
"object description, without even making it available for cross-referencing, "
"you can give the directive option flag ``:no-index:`` (which implies ``:no-"
"index-entry:``). If you do not want to typeset anything, you can give the "
"directive option flag ``:no-typesetting:``.  This can for example be used to "
"create only a target and index entry for later reference. Though, note that "
"not every directive in every domain may support these options."
msgstr ""

#: ../../../usage/domains/index.rst:128
msgid ""
"The directive option ``noindexentry`` in the Python, C, C++, and Javascript "
"domains."
msgstr ""

#: ../../../usage/domains/index.rst:132
msgid ""
"The directive option ``:nocontentsentry:`` in the Python, C, C++, "
"Javascript, and reStructuredText domains."
msgstr ""

#: ../../../usage/domains/index.rst:136
msgid ""
"The directive option ``no-typesetting`` in the Python, C, C++, Javascript, "
"and reStructuredText domains."
msgstr ""

#: ../../../usage/domains/index.rst:142
msgid "The directive option ``:noindex:`` was renamed to ``:no-index:``."
msgstr ""

#: ../../../usage/domains/index.rst:144
msgid ""
"The directive option ``:noindexentry:`` was renamed to ``:no-index-entry:``."
msgstr ""

#: ../../../usage/domains/index.rst:146
msgid ""
"The directive option ``:nocontentsentry:`` was renamed to ``:no-contents-"
"entry:``."
msgstr ""

#: ../../../usage/domains/index.rst:149
msgid ""
"The previous names are retained as aliases, but will be deprecated and "
"removed in a future version of Sphinx."
msgstr ""

#: ../../../usage/domains/index.rst:153
msgid "An example using a Python domain directive::"
msgstr ""

#: ../../../usage/domains/index.rst:155
msgid ""
".. py:function:: spam(eggs)\n"
"                 ham(eggs)\n"
"\n"
"   Spam or ham the foo."
msgstr ""

#: ../../../usage/domains/index.rst:160
msgid ""
"This describes the two Python functions ``spam`` and ``ham``.  (Note that "
"when signatures become too long, you can break them if you add a backslash "
"to lines that are continued in the next line.  Example::"
msgstr ""

#: ../../../usage/domains/index.rst:164
msgid ""
".. py:function:: filterwarnings(action, message='', category=Warning, \\\n"
"                                module='', lineno=0, append=False)\n"
"   :no-index:"
msgstr ""

#: ../../../usage/domains/index.rst:168
msgid "(This example also shows how to use the ``:no-index:`` flag.)"
msgstr ""

#: ../../../usage/domains/index.rst:170
msgid ""
"The domains also provide roles that link back to these object descriptions. "
"For example, to link to one of the functions described in the example above, "
"you could say ::"
msgstr ""

#: ../../../usage/domains/index.rst:174
msgid "The function :py:func:`spam` does a similar thing."
msgstr ""

#: ../../../usage/domains/index.rst:176
msgid ""
"As you can see, both directive and role names contain the domain name and "
"the directive name."
msgstr ""

#: ../../../usage/domains/index.rst:179
msgid ""
"The directive option ``:no-typesetting:`` can be used to create a target "
"(and index entry) which can later be referenced by the roles provided by the "
"domain. This is particularly useful for literate programming:"
msgstr ""

#: ../../../usage/domains/index.rst:184
msgid ""
".. py:function:: spam(eggs)\n"
"   :no-typesetting:\n"
"\n"
".. code:: python\n"
"\n"
"   def spam(eggs):\n"
"       pass\n"
"\n"
"The function :py:func:`spam` does nothing."
msgstr ""

#: ../../../usage/domains/index.rst:197
msgid "Default Domain"
msgstr ""

#: ../../../usage/domains/index.rst:198
msgid ""
"For documentation describing objects from solely one domain, authors will "
"not have to state again its name at each directive, role, etc... after "
"having specified a default. This can be done either via the config value :"
"confval:`primary_domain` or via this directive:"
msgstr ""

#: ../../../usage/domains/index.rst:205
msgid ""
"Select a new default domain.  While the :confval:`primary_domain` selects a "
"global default, this only has an effect within the same file."
msgstr ""

#: ../../../usage/domains/index.rst:208
msgid ""
"If no other default is selected, the Python domain (named ``py``) is the "
"default one, mostly for compatibility with documentation written for older "
"versions of Sphinx."
msgstr ""

#: ../../../usage/domains/index.rst:212
msgid ""
"Directives and roles that belong to the default domain can be mentioned "
"without giving the domain name, i.e. ::"
msgstr ""

#: ../../../usage/domains/index.rst:215
msgid ""
".. function:: pyfunc()\n"
"\n"
"   Describes a Python function.\n"
"\n"
"Reference to :func:`pyfunc`."
msgstr ""

#: ../../../usage/domains/index.rst:222
msgid "Cross-referencing syntax"
msgstr ""

#: ../../../usage/domains/index.rst:224
msgid ""
"For cross-reference roles provided by domains, the same :ref:`cross-"
"referencing modifiers <xref-modifiers>` exist as for general cross-"
"references. In short:"
msgstr ""

#: ../../../usage/domains/index.rst:229
msgid ""
"You may supply an explicit title and reference target: ``:py:mod:"
"`mathematical functions <math>``` will refer to the ``math`` module, but the "
"link text will be \"mathematical functions\"."
msgstr ""

#: ../../../usage/domains/index.rst:233
msgid ""
"If you prefix the content with an exclamation mark (``!``), no reference/"
"hyperlink will be created."
msgstr ""

#: ../../../usage/domains/index.rst:236
msgid ""
"If you prefix the content with ``~``, the link text will only be the last "
"component of the target. For example, ``:py:meth:`~queue.Queue.get``` will "
"refer to ``queue.Queue.get`` but only display ``get`` as the link text."
msgstr ""
