# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, the Sphinx developers
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-03 20:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../tutorial/describing-code.rst:2
msgid "Describing code in Sphinx"
msgstr ""

#: ../../../tutorial/describing-code.rst:4
msgid ""
"In the :doc:`previous sections of the tutorial </tutorial/index>` you can "
"read how to write narrative or prose documentation in Sphinx. In this "
"section you will describe code objects instead."
msgstr ""

#: ../../../tutorial/describing-code.rst:8
msgid ""
"Sphinx supports documenting code objects in several languages, namely "
"Python, C, C++, JavaScript, and reStructuredText. Each of them can be "
"documented using a series of directives and roles grouped by :doc:`domain </"
"usage/domains/index>`. For the remainder of the tutorial you will use the "
"Python domain, but all the concepts seen in this section apply for the other "
"domains as well."
msgstr ""

#: ../../../tutorial/describing-code.rst:18
msgid "Python"
msgstr ""

#: ../../../tutorial/describing-code.rst:21
msgid "Documenting Python objects"
msgstr ""

#: ../../../tutorial/describing-code.rst:23
msgid ""
"Sphinx offers several roles and directives to document Python objects, all "
"grouped together in :doc:`the Python domain </usage/domains/python>`. For "
"example, you can use the :rst:dir:`py:function` directive to document a "
"Python function, as follows:"
msgstr ""

#: ../../../tutorial/describing-code.rst:28
#: ../../../tutorial/describing-code.rst:81
#: ../../../tutorial/describing-code.rst:94
#: ../../../tutorial/describing-code.rst:103
#: ../../../tutorial/describing-code.rst:173
msgid "docs/source/usage.rst"
msgstr ""

#: ../../../tutorial/describing-code.rst:28
msgid ""
"Creating recipes\n"
"----------------\n"
"\n"
"To retrieve a list of random ingredients,\n"
"you can use the ``lumache.get_random_ingredients()`` function:\n"
"\n"
".. py:function:: lumache.get_random_ingredients(kind=None)\n"
"\n"
"   Return a list of random ingredients as strings.\n"
"\n"
"   :param kind: Optional \"kind\" of ingredients.\n"
"   :type kind: list[str] or None\n"
"   :return: The ingredients list.\n"
"   :rtype: list[str]"
msgstr ""

#: ../../../tutorial/describing-code.rst:46
msgid "Which will render like this:"
msgstr ""

#: ../../../tutorial/describing-code.rst:48
msgid "HTML result of documenting a Python function in Sphinx"
msgstr ""

#: ../../../tutorial/describing-code.rst:53
msgid "The rendered result of documenting a Python function in Sphinx"
msgstr ""

#: ../../../tutorial/describing-code.rst:55
msgid "Notice several things:"
msgstr ""

#: ../../../tutorial/describing-code.rst:57
msgid ""
"Sphinx parsed the argument of the ``.. py:function`` directive and "
"highlighted the module, the function name, and the parameters appropriately."
msgstr ""

#: ../../../tutorial/describing-code.rst:59
msgid ""
"The directive content includes a one-line description of the function, as "
"well as an :ref:`info field list <info-field-lists>` containing the function "
"parameter, its expected type, the return value, and the return type."
msgstr ""

#: ../../../tutorial/describing-code.rst:65
msgid ""
"The ``py:`` prefix specifies the :term:`domain`. You may configure the "
"default domain so you can omit the prefix, either globally using the :"
"confval:`primary_domain` configuration, or use the :rst:dir:`default-domain` "
"directive to change it from the point it is called until the end of the "
"file. For example, if you set it to ``py`` (the default), you can write ``.. "
"function::`` directly."
msgstr ""

#: ../../../tutorial/describing-code.rst:74
msgid "Cross-referencing Python objects"
msgstr ""

#: ../../../tutorial/describing-code.rst:76
msgid ""
"By default, most of these directives generate entities that can be cross-"
"referenced from any part of the documentation by using :ref:`a corresponding "
"role <python-xref-roles>`. For the case of functions, you can use :rst:role:"
"`py:func` for that, as follows:"
msgstr ""

#: ../../../tutorial/describing-code.rst:81
msgid ""
"The ``kind`` parameter should be either ``\"meat\"``, ``\"fish\"``,\n"
"or ``\"veggies\"``. Otherwise, :py:func:`lumache.get_random_ingredients`\n"
"will raise an exception."
msgstr ""

#: ../../../tutorial/describing-code.rst:88
msgid ""
"When generating code documentation, Sphinx will generate a cross-reference "
"automatically just by using the name of the object, without you having to "
"explicitly use a role for that. For example, you can describe the custom "
"exception raised by the function using the :rst:dir:`py:exception` directive:"
msgstr ""

#: ../../../tutorial/describing-code.rst:94
msgid ""
".. py:exception:: lumache.InvalidKindError\n"
"\n"
"   Raised if the kind is invalid."
msgstr ""

#: ../../../tutorial/describing-code.rst:101
msgid "Then, add this exception to the original description of the function:"
msgstr ""

#: ../../../tutorial/describing-code.rst:103
msgid ""
".. py:function:: lumache.get_random_ingredients(kind=None)\n"
"\n"
"   Return a list of random ingredients as strings.\n"
"\n"
"   :param kind: Optional \"kind\" of ingredients.\n"
"   :type kind: list[str] or None\n"
"   :raise lumache.InvalidKindError: If the kind is invalid.\n"
"   :return: The ingredients list.\n"
"   :rtype: list[str]"
msgstr ""

#: ../../../tutorial/describing-code.rst:117
msgid "And finally, this is how the result would look:"
msgstr ""

#: ../../../tutorial/describing-code.rst:119
msgid ""
"HTML result of documenting a Python function in Sphinx\n"
"with cross-references"
msgstr ""

#: ../../../tutorial/describing-code.rst:125
msgid ""
"HTML result of documenting a Python function in Sphinx with cross-references"
msgstr ""

#: ../../../tutorial/describing-code.rst:127
msgid "Beautiful, isn't it?"
msgstr ""

#: ../../../tutorial/describing-code.rst:130
msgid "Including doctests in your documentation"
msgstr ""

#: ../../../tutorial/describing-code.rst:132
msgid ""
"Since you are now describing code from a Python library, it will become "
"useful to keep both the documentation and the code as synchronized as "
"possible. One of the ways to do that in Sphinx is to include code snippets "
"in the documentation, called *doctests*, that are executed when the "
"documentation is built."
msgstr ""

#: ../../../tutorial/describing-code.rst:138
msgid ""
"To demonstrate doctests and other Sphinx features covered in this tutorial, "
"Sphinx will need to be able to import the code. To achieve that, write this "
"at the beginning of ``conf.py``:"
msgstr ""

#: ../../../tutorial/describing-code.rst:142
#: ../../../tutorial/describing-code.rst:162
msgid "docs/source/conf.py"
msgstr ""

#: ../../../tutorial/describing-code.rst:142
msgid ""
"# If extensions (or modules to document with autodoc) are in another "
"directory,\n"
"# add these directories to sys.path here.\n"
"import sys\n"
"from pathlib import Path\n"
"sys.path.insert(0, str(Path(__file__).resolve().parents[2]))"
msgstr ""

#: ../../../tutorial/describing-code.rst:154
msgid ""
"An alternative to changing the :py:data:`sys.path` variable is to create a "
"``pyproject.toml`` file and make the code installable, so it behaves like "
"any other Python library. However, the ``sys.path`` approach is simpler."
msgstr ""

#: ../../../tutorial/describing-code.rst:159
msgid ""
"Then, before adding doctests to your documentation, enable the :doc:`doctest "
"</usage/extensions/doctest>` extension in ``conf.py``:"
msgstr ""

#: ../../../tutorial/describing-code.rst:162
msgid ""
"extensions = [\n"
"    'sphinx.ext.duration',\n"
"    'sphinx.ext.doctest',\n"
"]"
msgstr ""

#: ../../../tutorial/describing-code.rst:171
msgid "Next, write a doctest block as follows:"
msgstr ""

#: ../../../tutorial/describing-code.rst:173
msgid ""
">>> import lumache\n"
">>> lumache.get_random_ingredients()\n"
"['shells', 'gorgonzola', 'parsley']"
msgstr ""

#: ../../../tutorial/describing-code.rst:180
msgid ""
"Doctests include the Python instructions to be run preceded by ``>>>``, the "
"standard Python interpreter prompt, as well as the expected output of each "
"instruction. This way, Sphinx can check whether the actual output matches "
"the expected one."
msgstr ""

#: ../../../tutorial/describing-code.rst:185
msgid ""
"To observe how a doctest failure looks like (rather than a code error as "
"above), let's write the return value incorrectly first. Therefore, add a "
"function ``get_random_ingredients`` like this:"
msgstr ""

#: ../../../tutorial/describing-code.rst:189
#: ../../../tutorial/describing-code.rst:224
msgid "lumache.py"
msgstr ""

#: ../../../tutorial/describing-code.rst:189
msgid ""
"def get_random_ingredients(kind=None):\n"
"    return [\"eggs\", \"bacon\", \"spam\"]"
msgstr ""

#: ../../../tutorial/describing-code.rst:195
msgid ""
"You can now run ``make doctest`` to execute the doctests of your "
"documentation. Initially this will display an error, since the actual code "
"does not behave as specified:"
msgstr ""

#: ../../../tutorial/describing-code.rst:199
msgid ""
"(.venv) $ make doctest\n"
"Running Sphinx v4.2.0\n"
"loading pickled environment... done\n"
"...\n"
"running tests...\n"
"\n"
"Document: usage\n"
"---------------\n"
"**********************************************************************\n"
"File \"usage.rst\", line 44, in default\n"
"Failed example:\n"
"    lumache.get_random_ingredients()\n"
"Expected:\n"
"    ['shells', 'gorgonzola', 'parsley']\n"
"Got:\n"
"    ['eggs', 'bacon', 'spam']\n"
"**********************************************************************\n"
"...\n"
"make: *** [Makefile:20: doctest] Error 1"
msgstr ""

#: ../../../tutorial/describing-code.rst:221
msgid ""
"As you can see, doctest reports the expected and the actual results, for "
"easy examination. It is now time to fix the function:"
msgstr ""

#: ../../../tutorial/describing-code.rst:224
msgid ""
"def get_random_ingredients(kind=None):\n"
"    return [\"shells\", \"gorgonzola\", \"parsley\"]"
msgstr ""

#: ../../../tutorial/describing-code.rst:231
msgid "And finally, ``make doctest`` reports success!"
msgstr ""

#: ../../../tutorial/describing-code.rst:233
msgid ""
"For big projects though, this manual approach can become a bit tedious. In "
"the next section, you will see :doc:`how to automate the process </tutorial/"
"automatic-doc-generation>`."
msgstr ""

#: ../../../tutorial/describing-code.rst:238
msgid "Other languages (C, C++, others)"
msgstr ""

#: ../../../tutorial/describing-code.rst:241
msgid "Documenting and cross-referencing objects"
msgstr ""

#: ../../../tutorial/describing-code.rst:243
msgid ""
"Sphinx also supports documenting and cross-referencing objects written in "
"other programming languages. There are four additional built-in domains: C, "
"C++, JavaScript, and reStructuredText. Third-party extensions may define "
"domains for more languages, such as"
msgstr ""

#: ../../../tutorial/describing-code.rst:248
msgid "`Fortran <https://sphinx-fortran.readthedocs.io>`_,"
msgstr ""

#: ../../../tutorial/describing-code.rst:249
msgid "`Julia <https://bastikr.github.io/sphinx-julia>`_, or"
msgstr ""

#: ../../../tutorial/describing-code.rst:250
msgid "`PHP <https://github.com/markstory/sphinxcontrib-phpdomain>`_."
msgstr ""

#: ../../../tutorial/describing-code.rst:252
msgid ""
"For example, to document a C++ type definition, you would use the built-in :"
"rst:dir:`cpp:type` directive, as follows:"
msgstr ""

#: ../../../tutorial/describing-code.rst:255
msgid ""
".. cpp:type:: std::vector<int> CustomList\n"
"\n"
"   A typedef-like declaration of a type."
msgstr ""

#: ../../../tutorial/describing-code.rst:261
msgid "Which would give the following result:"
msgstr ""

#: ../../../tutorial/describing-code.rst:265
msgid "A typedef-like declaration of a type."
msgstr ""

#: ../../../tutorial/describing-code.rst:267
msgid ""
"All such directives then generate references that can be cross-referenced by "
"using the corresponding role. For example, to reference the previous type "
"definition, you can use the :rst:role:`cpp:type` role as follows:"
msgstr ""

#: ../../../tutorial/describing-code.rst:272
msgid "Cross reference to :cpp:type:`CustomList`."
msgstr ""

#: ../../../tutorial/describing-code.rst:276
msgid ""
"Which would produce a hyperlink to the previous definition: :cpp:type:"
"`CustomList`."
msgstr ""
